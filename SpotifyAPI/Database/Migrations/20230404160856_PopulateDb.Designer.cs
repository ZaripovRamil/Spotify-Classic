// <auto-generated />
using System;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Database.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230404160856_PopulateDb")]
    partial class PopulateDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GenreTrack", b =>
                {
                    b.Property<string>("GenresId")
                        .HasColumnType("text");

                    b.Property<string>("TracksId")
                        .HasColumnType("text");

                    b.HasKey("GenresId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("GenreTrack");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Models.Entities.Album", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Albums");

                    b.HasData(
                        new
                        {
                            Id = "ed59b7ce-03a8-4ec1-9e2b-d1c53285eeaa",
                            AuthorId = "ed0a84cc-a98c-4923-945a-e2e24e7b3c07",
                            Name = "The Four Seasons",
                            ReleaseYear = 1725,
                            Type = 0
                        },
                        new
                        {
                            Id = "b919ce49-cfce-46df-8835-be2bc6da79ec",
                            AuthorId = "52e15ef8-6477-42ed-954b-f202ac1e41cc",
                            Name = "Moonlight Sonata",
                            ReleaseYear = 1802,
                            Type = 1
                        },
                        new
                        {
                            Id = "857e8dea-a4e3-431e-92d5-c50c515c3126",
                            AuthorId = "e791ac96-58fe-4e51-9a6d-248cbb6a1043",
                            Name = "Waltz No. 2",
                            ReleaseYear = 1938,
                            Type = 1
                        },
                        new
                        {
                            Id = "7283457b-a8e2-4375-b059-8f9832507ab3",
                            AuthorId = "0484f25a-98d7-43ae-9363-b90e83bcbba1",
                            Name = "Fantaisie-Impromptu",
                            ReleaseYear = 1834,
                            Type = 1
                        },
                        new
                        {
                            Id = "af0dd673-69f7-410f-95da-1b225eb0281d",
                            AuthorId = "9e0ac14d-b7ab-4ee2-b371-1bb5c1539f73",
                            Name = "The Tale of Tsar Saltan",
                            ReleaseYear = 1900,
                            Type = 0
                        },
                        new
                        {
                            Id = "48058f74-21b7-4cb1-868d-42d6e60d84bf",
                            AuthorId = "b81ee10a-ff45-4692-aed5-b35a43650c08",
                            Name = "Grandes études de Paganini",
                            ReleaseYear = 1851,
                            Type = 0
                        },
                        new
                        {
                            Id = "70b37649-acbb-4160-838c-cb3622f469f6",
                            AuthorId = "b81ee10a-ff45-4692-aed5-b35a43650c08",
                            Name = "Liebestraum",
                            ReleaseYear = 1850,
                            Type = 0
                        },
                        new
                        {
                            Id = "e4edb6f1-f1c6-4c71-bf18-9993abdd3ff7",
                            AuthorId = "41d65bd8-9403-49ee-b914-dd92bf8e3cdd",
                            Name = "Lettre à ma mère",
                            ReleaseYear = 1979,
                            Type = 0
                        },
                        new
                        {
                            Id = "aa22cc97-a3ec-4629-8554-a36ce2e5112f",
                            AuthorId = "0cbe483b-13fb-43b6-8261-b0a1fab9a545",
                            Name = "Requiem",
                            ReleaseYear = 1791,
                            Type = 0
                        },
                        new
                        {
                            Id = "c92d956f-10a9-48cd-be27-bcd04daa17a0",
                            AuthorId = "0cbe483b-13fb-43b6-8261-b0a1fab9a545",
                            Name = "The marriage of Figaro",
                            ReleaseYear = 1786,
                            Type = 0
                        },
                        new
                        {
                            Id = "4ad605b9-42a2-450e-a7a7-0e531ae4f856",
                            AuthorId = "3eb97e13-00df-408c-b394-2b38d08ebb0e",
                            Name = "Violin Concerto No. 2",
                            ReleaseYear = 1826,
                            Type = 0
                        },
                        new
                        {
                            Id = "9fe66611-e9ee-46fc-8c7f-4157c779ca0b",
                            AuthorId = "a0b14480-4bba-4c11-be48-374dc69de041",
                            Name = "Whenever you need somebody",
                            ReleaseYear = 1987,
                            Type = 0
                        },
                        new
                        {
                            Id = "f5e45467-3840-4a38-933d-e1edfa835789",
                            AuthorId = "a852dcb1-7a96-4b41-8c36-48a69b30f97a",
                            Name = "Valse-Scherzo",
                            ReleaseYear = 1877,
                            Type = 0
                        },
                        new
                        {
                            Id = "dad299c1-d656-494b-920e-025249927d9f",
                            AuthorId = "0cbe483b-13fb-43b6-8261-b0a1fab9a545",
                            Name = "Piano Sonata No. 11",
                            ReleaseYear = 1784,
                            Type = 0
                        },
                        new
                        {
                            Id = "0a8c3ca2-56ca-4534-a426-648854e61821",
                            AuthorId = "b81ee10a-ff45-4692-aed5-b35a43650c08",
                            Name = "Hungarian Rhapsodies",
                            ReleaseYear = 1885,
                            Type = 0
                        });
                });

            modelBuilder.Entity("Models.Entities.Author", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = "0cbe483b-13fb-43b6-8261-b0a1fab9a545",
                            Name = "Wolfgang Amadeus Mozart",
                            UserId = "5977475a-8a6c-468f-a3c3-040428f631f3"
                        },
                        new
                        {
                            Id = "ed0a84cc-a98c-4923-945a-e2e24e7b3c07",
                            Name = "Antonio Lucio Vivaldi",
                            UserId = "b4263da1-7fda-468f-a62f-757d2a60eb2a"
                        },
                        new
                        {
                            Id = "52e15ef8-6477-42ed-954b-f202ac1e41cc",
                            Name = "Ludwig van Beethoven",
                            UserId = "f2a9777e-7d49-4cd6-956d-93a5cc861dcc"
                        },
                        new
                        {
                            Id = "e791ac96-58fe-4e51-9a6d-248cbb6a1043",
                            Name = "Dmitri Shostakovich",
                            UserId = "acc6d832-3c00-4be9-9a89-0b96348703a5"
                        },
                        new
                        {
                            Id = "0484f25a-98d7-43ae-9363-b90e83bcbba1",
                            Name = "Frédéric Chopin",
                            UserId = "f682d5e4-bbad-4bb9-a82e-a4a0eb58c64c"
                        },
                        new
                        {
                            Id = "9e0ac14d-b7ab-4ee2-b371-1bb5c1539f73",
                            Name = "Nikolai Rimsky-Korsakov",
                            UserId = "8e5e2a33-bc9b-4693-9e66-582547ce8a16"
                        },
                        new
                        {
                            Id = "b81ee10a-ff45-4692-aed5-b35a43650c08",
                            Name = "Franz Liszt",
                            UserId = "3f804b49-86aa-4a51-823c-ee9a09ab9992"
                        },
                        new
                        {
                            Id = "41d65bd8-9403-49ee-b914-dd92bf8e3cdd",
                            Name = "Paul de Senneville",
                            UserId = "b5712030-bd71-46c9-894f-3a41b49efb8c"
                        },
                        new
                        {
                            Id = "3eb97e13-00df-408c-b394-2b38d08ebb0e",
                            Name = "Niccolò Paganini",
                            UserId = "23cab148-5e32-404b-8eca-6ecde96fc6c4"
                        },
                        new
                        {
                            Id = "a0b14480-4bba-4c11-be48-374dc69de041",
                            Name = "Rick Astley",
                            UserId = "e9b5b45d-a3d0-46e3-b316-050026bc6a8b"
                        },
                        new
                        {
                            Id = "a852dcb1-7a96-4b41-8c36-48a69b30f97a",
                            Name = "Pyotr Tchaikovsky",
                            UserId = "e20fc526-7a91-45af-8386-48124f55dd57"
                        });
                });

            modelBuilder.Entity("Models.Entities.Genre", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = "f041db83-ac07-4d6a-b9e0-7dcf6a9dcebe",
                            Name = "Classic"
                        },
                        new
                        {
                            Id = "8a81f851-a8c9-4799-b927-bc7a9f24e422",
                            Name = "Instrumental"
                        },
                        new
                        {
                            Id = "7a057825-f164-4532-b401-30f01265b23b",
                            Name = "Jazz"
                        },
                        new
                        {
                            Id = "6db57706-b3be-47b8-b405-dabca15e0f1c",
                            Name = "New Age"
                        },
                        new
                        {
                            Id = "59f65d80-4788-4bc4-8da3-956072f8177f",
                            Name = "Pop"
                        });
                });

            modelBuilder.Entity("Models.Entities.Playlist", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OwnerId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("Models.Entities.Track", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AlbumId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            Id = "7c561b1e-3070-4e83-b71a-2fd7a69fa040",
                            AlbumId = "ed59b7ce-03a8-4ec1-9e2b-d1c53285eeaa",
                            Name = "Summer - Storm"
                        },
                        new
                        {
                            Id = "9f1d7cfd-53c6-478f-82e2-db737d1b9ecf",
                            AlbumId = "ed59b7ce-03a8-4ec1-9e2b-d1c53285eeaa",
                            Name = "Spring"
                        },
                        new
                        {
                            Id = "e6a51aae-2ee3-4253-8b9c-1e88e65f0efb",
                            AlbumId = "b919ce49-cfce-46df-8835-be2bc6da79ec",
                            Name = "Moonlight Sonata"
                        },
                        new
                        {
                            Id = "29ad8ca9-c791-4482-8a44-15776862b282",
                            AlbumId = "857e8dea-a4e3-431e-92d5-c50c515c3126",
                            Name = "Waltz No. 2"
                        },
                        new
                        {
                            Id = "4180556e-5365-4b9c-aa72-a47241346855",
                            AlbumId = "7283457b-a8e2-4375-b059-8f9832507ab3",
                            Name = "Fantaisie Impromptu"
                        },
                        new
                        {
                            Id = "cdbc9b43-ee1b-4a64-8b2d-d579522ea84f",
                            AlbumId = "af0dd673-69f7-410f-95da-1b225eb0281d",
                            Name = "Flight of the Bumblebee"
                        },
                        new
                        {
                            Id = "864239f6-65c5-440f-8326-213b3b25693f",
                            AlbumId = "48058f74-21b7-4cb1-868d-42d6e60d84bf",
                            Name = "La Campanella"
                        },
                        new
                        {
                            Id = "44f268c1-3e94-4d05-8ccb-17c2e77b538d",
                            AlbumId = "70b37649-acbb-4160-838c-cb3622f469f6",
                            Name = "Love Dream"
                        },
                        new
                        {
                            Id = "5a9ba216-9883-471d-9c0f-4c3d37e4ec34",
                            AlbumId = "e4edb6f1-f1c6-4c71-bf18-9993abdd3ff7",
                            Name = "Marriage d'Amour"
                        },
                        new
                        {
                            Id = "9d0a67df-6fb4-4fac-b670-49a5f590beb7",
                            AlbumId = "aa22cc97-a3ec-4629-8554-a36ce2e5112f",
                            Name = "Lacrimosa"
                        },
                        new
                        {
                            Id = "15fa89e4-7777-4330-b32e-62172cd398c0",
                            AlbumId = "c92d956f-10a9-48cd-be27-bcd04daa17a0",
                            Name = "Marriage of Figaro - Overture"
                        },
                        new
                        {
                            Id = "493afb2c-eb2a-4eab-9e4e-6585eb9924ae",
                            AlbumId = "4ad605b9-42a2-450e-a7a7-0e531ae4f856",
                            Name = "La Campanella"
                        },
                        new
                        {
                            Id = "572cc6a2-a5ba-47f5-8819-8330770cf8b5",
                            AlbumId = "9fe66611-e9ee-46fc-8c7f-4157c779ca0b",
                            Name = "Never gonna give you up"
                        },
                        new
                        {
                            Id = "36febf49-1c49-4b69-8084-73ebce69040a",
                            AlbumId = "f5e45467-3840-4a38-933d-e1edfa835789",
                            Name = "Valse Sentimental"
                        },
                        new
                        {
                            Id = "b26e8131-28bf-4ae9-842b-33b3d639b08e",
                            AlbumId = "dad299c1-d656-494b-920e-025249927d9f",
                            Name = "Turkish March"
                        },
                        new
                        {
                            Id = "2d47fb0d-971c-44e5-9d76-8b5589f0cbbb",
                            AlbumId = "0a8c3ca2-56ca-4534-a426-648854e61821",
                            Name = "Hungarian Rhapsody No. 2"
                        });
                });

            modelBuilder.Entity("Models.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("UserName", "Email")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "5977475a-8a6c-468f-a3c3-040428f631f3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "254e8011-c12a-4fa8-a844-36a3d8de8648",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Wolfgang Amadeus Mozart",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "5bc3ca6b-f981-4bcb-aba1-d51719af87f8",
                            TwoFactorEnabled = false,
                            UserName = "mozart"
                        },
                        new
                        {
                            Id = "b4263da1-7fda-468f-a62f-757d2a60eb2a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "818c4dc5-2a97-439d-8ebd-1f83e90e6892",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Antonio Lucio Vivaldi",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "7fad14f9-043f-47c9-bf83-9f49ee00be14",
                            TwoFactorEnabled = false,
                            UserName = "vivaldi"
                        },
                        new
                        {
                            Id = "f2a9777e-7d49-4cd6-956d-93a5cc861dcc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "986c157f-db8b-4915-b333-0dd71290076d",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Ludwig van Beethoven",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "7b94ad8f-b8c7-4e52-a533-abb20bd2be49",
                            TwoFactorEnabled = false,
                            UserName = "beethoven"
                        },
                        new
                        {
                            Id = "acc6d832-3c00-4be9-9a89-0b96348703a5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "865cb953-7d03-464c-abbc-ec7b8f2abeab",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Dmitri Shostakovich",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "bc4ff5fa-a000-4f8a-a0e7-027cc8ed57ce",
                            TwoFactorEnabled = false,
                            UserName = "shostakovich"
                        },
                        new
                        {
                            Id = "f682d5e4-bbad-4bb9-a82e-a4a0eb58c64c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "14b59e8f-bf91-4a9f-97c7-bde0d2ba09df",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Frédéric Chopin",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "9b9a3872-9cc2-41bb-be73-984fcf983e9b",
                            TwoFactorEnabled = false,
                            UserName = "chopin"
                        },
                        new
                        {
                            Id = "8e5e2a33-bc9b-4693-9e66-582547ce8a16",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d9a40c59-cd93-42bb-9db0-723b72241f74",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Nikolai Rimsky-Korsakov",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "2af566ff-8021-411c-b4d7-4c41acde2641",
                            TwoFactorEnabled = false,
                            UserName = "rimsky-korsakov"
                        },
                        new
                        {
                            Id = "3f804b49-86aa-4a51-823c-ee9a09ab9992",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f3300647-b8c1-4a5f-9454-2af54444b185",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Franz Liszt",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "6ffd1e99-4c52-4f0b-b3e9-0244eb5bc3d4",
                            TwoFactorEnabled = false,
                            UserName = "liszt"
                        },
                        new
                        {
                            Id = "b5712030-bd71-46c9-894f-3a41b49efb8c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a583b855-5513-4022-99e9-5c15d2b0d837",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Paul de Senneville",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "38694c72-34d2-44ad-9d65-c8a3d3a6d7b3",
                            TwoFactorEnabled = false,
                            UserName = "senneville"
                        },
                        new
                        {
                            Id = "23cab148-5e32-404b-8eca-6ecde96fc6c4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f53c12f0-618f-4798-a15b-841a60f3f191",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Niccolò Paganini",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "3f3767ad-c671-4e74-99df-ed421cce809f",
                            TwoFactorEnabled = false,
                            UserName = "paganini"
                        },
                        new
                        {
                            Id = "e9b5b45d-a3d0-46e3-b316-050026bc6a8b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "76d6953f-a27f-4bcf-83ed-3b6243ba7041",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Rick Astley",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "82a58ed3-7780-421c-b8af-55728362940a",
                            TwoFactorEnabled = false,
                            UserName = "astley"
                        },
                        new
                        {
                            Id = "e20fc526-7a91-45af-8386-48124f55dd57",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6cbd9bcc-fa01-49e8-845b-c148e5415784",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Pyotr Tchaikovsky",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "4224fc97-4f9f-4aa4-9631-d4c2fd0f063b",
                            TwoFactorEnabled = false,
                            UserName = "tchaikovsky"
                        });
                });

            modelBuilder.Entity("PlaylistTrack", b =>
                {
                    b.Property<string>("InPlaylistsId")
                        .HasColumnType("text");

                    b.Property<string>("TracksId")
                        .HasColumnType("text");

                    b.HasKey("InPlaylistsId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("PlaylistTrack");
                });

            modelBuilder.Entity("TrackUser", b =>
                {
                    b.Property<string>("HistoryId")
                        .HasColumnType("text");

                    b.Property<string>("HistoryId1")
                        .HasColumnType("text");

                    b.HasKey("HistoryId", "HistoryId1");

                    b.HasIndex("HistoryId1");

                    b.ToTable("TrackUser");
                });

            modelBuilder.Entity("GenreTrack", b =>
                {
                    b.HasOne("Models.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Entities.Album", b =>
                {
                    b.HasOne("Models.Entities.Author", "Author")
                        .WithMany("Albums")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Models.Entities.Playlist", b =>
                {
                    b.HasOne("Models.Entities.User", "Owner")
                        .WithMany("Playlists")
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Models.Entities.Track", b =>
                {
                    b.HasOne("Models.Entities.Album", "Album")
                        .WithMany("Tracks")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");
                });

            modelBuilder.Entity("PlaylistTrack", b =>
                {
                    b.HasOne("Models.Entities.Playlist", null)
                        .WithMany()
                        .HasForeignKey("InPlaylistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TrackUser", b =>
                {
                    b.HasOne("Models.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("HistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("HistoryId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Entities.Album", b =>
                {
                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("Models.Entities.Author", b =>
                {
                    b.Navigation("Albums");
                });

            modelBuilder.Entity("Models.Entities.User", b =>
                {
                    b.Navigation("Playlists");
                });
#pragma warning restore 612, 618
        }
    }
}
