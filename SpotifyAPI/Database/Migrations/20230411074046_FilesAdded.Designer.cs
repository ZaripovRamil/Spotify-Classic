// <auto-generated />
using System;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Database.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230411074046_FilesAdded")]
    partial class FilesAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GenreTrack", b =>
                {
                    b.Property<string>("GenresId")
                        .HasColumnType("text");

                    b.Property<string>("TracksId")
                        .HasColumnType("text");

                    b.HasKey("GenresId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("GenreTrack");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Models.Entities.Album", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PreviewId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Albums");

                    b.HasData(
                        new
                        {
                            Id = "c5cfb64c-c670-4c48-9cf2-e3e085e72831",
                            AuthorId = "baf3a3d1-6bcf-492f-aa49-8aa6411f11d9",
                            Name = "The Four Seasons",
                            PreviewId = "7c561b1e-3070-4e83-b71a-2fd7a69fa040",
                            ReleaseYear = 1725,
                            Type = 0
                        },
                        new
                        {
                            Id = "68e1d886-f75d-48b9-99d2-7ce226a49431",
                            AuthorId = "103b2583-9e00-4238-820f-5589b575d8d5",
                            Name = "Moonlight Sonata",
                            PreviewId = "e6a51aae-2ee3-4253-8b9c-1e88e65f0efb",
                            ReleaseYear = 1802,
                            Type = 1
                        },
                        new
                        {
                            Id = "12fdb2a4-4431-4cdd-a0f9-8b630dc73092",
                            AuthorId = "75240b99-b1e9-4cf4-bd2e-1543af089999",
                            Name = "Waltz No. 2",
                            PreviewId = "29ad8ca9-c791-4482-8a44-15776862b282",
                            ReleaseYear = 1938,
                            Type = 1
                        },
                        new
                        {
                            Id = "2240f5ad-7074-4756-b27e-ae6d53093748",
                            AuthorId = "5fe5fd0f-cee2-4cd3-ad9b-93c106715b3d",
                            Name = "Fantaisie-Impromptu",
                            PreviewId = "4180556e-5365-4b9c-aa72-a47241346855",
                            ReleaseYear = 1834,
                            Type = 1
                        },
                        new
                        {
                            Id = "a75dea3e-f574-47c3-bd57-2f0952b960a4",
                            AuthorId = "7d102e68-f2c6-4ee5-b288-2bdbba1ec145",
                            Name = "The Tale of Tsar Saltan",
                            PreviewId = "cdbc9b43-ee1b-4a64-8b2d-d579522ea84f",
                            ReleaseYear = 1900,
                            Type = 0
                        },
                        new
                        {
                            Id = "d9e59b26-7e49-4b7b-91ef-4ae000e82310",
                            AuthorId = "26206096-8ce8-49ca-98f9-900e58e62709",
                            Name = "Grandes études de Paganini",
                            PreviewId = "864239f6-65c5-440f-8326-213b3b25693f",
                            ReleaseYear = 1851,
                            Type = 0
                        },
                        new
                        {
                            Id = "b5c23776-2166-46a4-8a76-31883bbe13da",
                            AuthorId = "26206096-8ce8-49ca-98f9-900e58e62709",
                            Name = "Liebestraum",
                            PreviewId = "44f268c1-3e94-4d05-8ccb-17c2e77b538d",
                            ReleaseYear = 1850,
                            Type = 0
                        },
                        new
                        {
                            Id = "dd68b4b0-81d5-42ad-b971-160c94877251",
                            AuthorId = "5e6586df-8c26-44cd-9c27-29f704419eeb",
                            Name = "Lettre à ma mère",
                            PreviewId = "5a9ba216-9883-471d-9c0f-4c3d37e4ec34",
                            ReleaseYear = 1979,
                            Type = 0
                        },
                        new
                        {
                            Id = "fd7faef4-acaf-48cc-a971-5a0a02a2be13",
                            AuthorId = "ca5417cf-8b4b-4c93-9f06-147b3fda9d96",
                            Name = "Requiem",
                            PreviewId = "9d0a67df-6fb4-4fac-b670-49a5f590beb7",
                            ReleaseYear = 1791,
                            Type = 0
                        },
                        new
                        {
                            Id = "033252b5-b552-48cc-bf5b-d6b78f4c71b6",
                            AuthorId = "ca5417cf-8b4b-4c93-9f06-147b3fda9d96",
                            Name = "The marriage of Figaro",
                            PreviewId = "15fa89e4-7777-4330-b32e-62172cd398c0",
                            ReleaseYear = 1786,
                            Type = 0
                        },
                        new
                        {
                            Id = "ca4ffc77-a648-4514-b7c5-c3ca17ef60f8",
                            AuthorId = "09f413ea-12fb-43c7-b249-314be1874f23",
                            Name = "Violin Concerto No. 2",
                            PreviewId = "493afb2c-eb2a-4eab-9e4e-6585eb9924ae",
                            ReleaseYear = 1826,
                            Type = 0
                        },
                        new
                        {
                            Id = "f273511c-5982-4327-90fd-76c8e3da42e7",
                            AuthorId = "fb408405-ba23-4958-8378-164fddee75d0",
                            Name = "Whenever you need somebody",
                            PreviewId = "572cc6a2-a5ba-47f5-8819-8330770cf8b5",
                            ReleaseYear = 1987,
                            Type = 0
                        },
                        new
                        {
                            Id = "0d39cad4-43f8-4c2f-bd82-7e97ecf42fb8",
                            AuthorId = "0112b7d1-1a93-4995-b6be-7d5c375e3c7c",
                            Name = "Valse-Scherzo",
                            PreviewId = "36febf49-1c49-4b69-8084-73ebce69040a",
                            ReleaseYear = 1877,
                            Type = 0
                        },
                        new
                        {
                            Id = "99deaecf-da9a-4dfd-a52c-84248c8b9466",
                            AuthorId = "ca5417cf-8b4b-4c93-9f06-147b3fda9d96",
                            Name = "Piano Sonata No. 11",
                            PreviewId = "b26e8131-28bf-4ae9-842b-33b3d639b08e",
                            ReleaseYear = 1784,
                            Type = 0
                        },
                        new
                        {
                            Id = "5c852bb6-5aa0-41b0-946c-d4ae234dfc71",
                            AuthorId = "26206096-8ce8-49ca-98f9-900e58e62709",
                            Name = "Hungarian Rhapsodies",
                            PreviewId = "0a8c3ca2-56ca-4534-a426-648854e61821",
                            ReleaseYear = 1885,
                            Type = 0
                        });
                });

            modelBuilder.Entity("Models.Entities.Author", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = "ca5417cf-8b4b-4c93-9f06-147b3fda9d96",
                            Name = "Wolfgang Amadeus Mozart",
                            UserId = "6a7202f7-0b97-4e18-8654-62fef8634331"
                        },
                        new
                        {
                            Id = "baf3a3d1-6bcf-492f-aa49-8aa6411f11d9",
                            Name = "Antonio Lucio Vivaldi",
                            UserId = "b8160d81-d4a8-4742-b47c-50812ab1b7f2"
                        },
                        new
                        {
                            Id = "103b2583-9e00-4238-820f-5589b575d8d5",
                            Name = "Ludwig van Beethoven",
                            UserId = "0337ed8c-bc86-4f77-8113-dc38e39bbf07"
                        },
                        new
                        {
                            Id = "75240b99-b1e9-4cf4-bd2e-1543af089999",
                            Name = "Dmitri Shostakovich",
                            UserId = "42002238-02b8-4372-bc7e-4b7a5f5987eb"
                        },
                        new
                        {
                            Id = "5fe5fd0f-cee2-4cd3-ad9b-93c106715b3d",
                            Name = "Frédéric Chopin",
                            UserId = "dcb31b4d-b8db-4d85-a9dc-fc900fbd9e09"
                        },
                        new
                        {
                            Id = "7d102e68-f2c6-4ee5-b288-2bdbba1ec145",
                            Name = "Nikolai Rimsky-Korsakov",
                            UserId = "2484a579-b940-47e8-a7c5-d6b3da63328b"
                        },
                        new
                        {
                            Id = "26206096-8ce8-49ca-98f9-900e58e62709",
                            Name = "Franz Liszt",
                            UserId = "3e1fdf28-2de8-461a-8fe2-bfa8a62cb3e3"
                        },
                        new
                        {
                            Id = "5e6586df-8c26-44cd-9c27-29f704419eeb",
                            Name = "Paul de Senneville",
                            UserId = "a0b0382d-bafe-482e-8f97-2ad87849d8b4"
                        },
                        new
                        {
                            Id = "09f413ea-12fb-43c7-b249-314be1874f23",
                            Name = "Niccolò Paganini",
                            UserId = "a28c3c3a-461c-48a2-8cb7-d42dc399a481"
                        },
                        new
                        {
                            Id = "fb408405-ba23-4958-8378-164fddee75d0",
                            Name = "Rick Astley",
                            UserId = "45f45032-49e6-4731-8ff2-fe906d2de6c7"
                        },
                        new
                        {
                            Id = "0112b7d1-1a93-4995-b6be-7d5c375e3c7c",
                            Name = "Pyotr Tchaikovsky",
                            UserId = "760cb97a-5057-4b2b-a2cd-fd59ae1aeb3e"
                        });
                });

            modelBuilder.Entity("Models.Entities.Genre", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = "dfcf7bd3-9f88-421d-ae11-f1c1b376a101",
                            Name = "Classic"
                        },
                        new
                        {
                            Id = "b36d757d-6ccf-4f38-991d-88edd4278ce9",
                            Name = "Instrumental"
                        },
                        new
                        {
                            Id = "af8444ff-e874-4167-ad04-132c9ff89054",
                            Name = "Jazz"
                        },
                        new
                        {
                            Id = "7d1a3c18-e3ce-4ae4-a8ac-7f776563fdfb",
                            Name = "New Age"
                        },
                        new
                        {
                            Id = "ac04d579-63f2-4814-96ce-c2ed90c502d7",
                            Name = "Pop"
                        });
                });

            modelBuilder.Entity("Models.Entities.Playlist", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OwnerId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("Models.Entities.Track", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AlbumId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.ToTable("Tracks");
                });

            modelBuilder.Entity("Models.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("UserName", "Email")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "6a7202f7-0b97-4e18-8654-62fef8634331",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5a1aefe7-f17c-4ec9-b022-67098ae02173",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Wolfgang Amadeus Mozart",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "da90bd61-a930-490b-adfb-1d364875c14a",
                            TwoFactorEnabled = false,
                            UserName = "mozart"
                        },
                        new
                        {
                            Id = "b8160d81-d4a8-4742-b47c-50812ab1b7f2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6f2e219e-500f-4ad1-b6b9-e7dad1a16d79",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Antonio Lucio Vivaldi",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "b74c3bfb-2511-4994-9bcc-e77a77c1dd3e",
                            TwoFactorEnabled = false,
                            UserName = "vivaldi"
                        },
                        new
                        {
                            Id = "0337ed8c-bc86-4f77-8113-dc38e39bbf07",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2da50d79-5cb8-4e08-97a3-fed708ce8b91",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Ludwig van Beethoven",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "d9a806fc-b3d8-4cbe-87b9-a03a1d716341",
                            TwoFactorEnabled = false,
                            UserName = "beethoven"
                        },
                        new
                        {
                            Id = "42002238-02b8-4372-bc7e-4b7a5f5987eb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ea464273-137b-42fc-a85e-c72fa8c62d1c",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Dmitri Shostakovich",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "478c1498-4977-49c9-975a-4fc34033fc54",
                            TwoFactorEnabled = false,
                            UserName = "shostakovich"
                        },
                        new
                        {
                            Id = "dcb31b4d-b8db-4d85-a9dc-fc900fbd9e09",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b7495544-00bc-4fb7-9252-d03e8581cd4a",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Frédéric Chopin",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "0ae4254d-e84d-465c-a50c-07e1f228b94e",
                            TwoFactorEnabled = false,
                            UserName = "chopin"
                        },
                        new
                        {
                            Id = "2484a579-b940-47e8-a7c5-d6b3da63328b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f6edd93c-5cd7-468a-be9c-8422a4d4df6e",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Nikolai Rimsky-Korsakov",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "b591dd4a-057a-45ce-bfe2-a90ab6299b9d",
                            TwoFactorEnabled = false,
                            UserName = "rimsky-korsakov"
                        },
                        new
                        {
                            Id = "3e1fdf28-2de8-461a-8fe2-bfa8a62cb3e3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "81230e31-685f-4063-9735-b629fcd7b1ad",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Franz Liszt",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "714f3246-1f0f-4477-aae7-f6b7714c0118",
                            TwoFactorEnabled = false,
                            UserName = "liszt"
                        },
                        new
                        {
                            Id = "a0b0382d-bafe-482e-8f97-2ad87849d8b4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "52275665-a705-4989-b1db-00de152bf4bf",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Paul de Senneville",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "b42e69a1-b20f-4b21-b997-618108599210",
                            TwoFactorEnabled = false,
                            UserName = "senneville"
                        },
                        new
                        {
                            Id = "a28c3c3a-461c-48a2-8cb7-d42dc399a481",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "667e2b3b-1d1c-4cdd-b20c-42e3ddcb0e28",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Niccolò Paganini",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "4919c7db-4dc4-4bf1-a988-cd3fe08a01d3",
                            TwoFactorEnabled = false,
                            UserName = "paganini"
                        },
                        new
                        {
                            Id = "45f45032-49e6-4731-8ff2-fe906d2de6c7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "630dd9ca-6c1e-490b-90cf-cf61605cb0f8",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Rick Astley",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "b90777f4-0e79-4712-aadf-f8d8e4177236",
                            TwoFactorEnabled = false,
                            UserName = "astley"
                        },
                        new
                        {
                            Id = "760cb97a-5057-4b2b-a2cd-fd59ae1aeb3e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "39578c9b-4a5d-49ad-bd0e-7c3a6480d331",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Pyotr Tchaikovsky",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "723a5a81-6373-427f-b4f2-8a1d452d5452",
                            TwoFactorEnabled = false,
                            UserName = "tchaikovsky"
                        });
                });

            modelBuilder.Entity("PlaylistTrack", b =>
                {
                    b.Property<string>("InPlaylistsId")
                        .HasColumnType("text");

                    b.Property<string>("TracksId")
                        .HasColumnType("text");

                    b.HasKey("InPlaylistsId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("PlaylistTrack");
                });

            modelBuilder.Entity("TrackUser", b =>
                {
                    b.Property<string>("HistoryId")
                        .HasColumnType("text");

                    b.Property<string>("HistoryId1")
                        .HasColumnType("text");

                    b.HasKey("HistoryId", "HistoryId1");

                    b.HasIndex("HistoryId1");

                    b.ToTable("TrackUser");
                });

            modelBuilder.Entity("GenreTrack", b =>
                {
                    b.HasOne("Models.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Entities.Album", b =>
                {
                    b.HasOne("Models.Entities.Author", "Author")
                        .WithMany("Albums")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Models.Entities.Author", b =>
                {
                    b.HasOne("Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Entities.Playlist", b =>
                {
                    b.HasOne("Models.Entities.User", "Owner")
                        .WithMany("Playlists")
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Models.Entities.Track", b =>
                {
                    b.HasOne("Models.Entities.Album", "Album")
                        .WithMany("Tracks")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");
                });

            modelBuilder.Entity("PlaylistTrack", b =>
                {
                    b.HasOne("Models.Entities.Playlist", null)
                        .WithMany()
                        .HasForeignKey("InPlaylistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TrackUser", b =>
                {
                    b.HasOne("Models.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("HistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("HistoryId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Entities.Album", b =>
                {
                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("Models.Entities.Author", b =>
                {
                    b.Navigation("Albums");
                });

            modelBuilder.Entity("Models.Entities.User", b =>
                {
                    b.Navigation("Playlists");
                });
#pragma warning restore 612, 618
        }
    }
}
