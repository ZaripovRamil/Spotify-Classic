// <auto-generated />
using System;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Database.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230411074708_ReturnedTracks")]
    partial class ReturnedTracks
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GenreTrack", b =>
                {
                    b.Property<string>("GenresId")
                        .HasColumnType("text");

                    b.Property<string>("TracksId")
                        .HasColumnType("text");

                    b.HasKey("GenresId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("GenreTrack");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Models.Entities.Album", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PreviewId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Albums");

                    b.HasData(
                        new
                        {
                            Id = "6004f73f-24f3-4ee2-891f-c273fec9a7fb",
                            AuthorId = "7c2f4604-c265-469f-9233-daa5f2144291",
                            Name = "The Four Seasons",
                            PreviewId = "7c561b1e-3070-4e83-b71a-2fd7a69fa040",
                            ReleaseYear = 1725,
                            Type = 0
                        },
                        new
                        {
                            Id = "6c71ddc7-99bd-4f52-927f-a7fe484b81f4",
                            AuthorId = "a4e4d550-8d6d-41c3-83f6-30b7b733db2f",
                            Name = "Moonlight Sonata",
                            PreviewId = "e6a51aae-2ee3-4253-8b9c-1e88e65f0efb",
                            ReleaseYear = 1802,
                            Type = 1
                        },
                        new
                        {
                            Id = "4bd78fad-e877-4eb5-af51-7ad51cba7cf4",
                            AuthorId = "0fbecaf3-2ffc-4764-bcae-673a9ce80728",
                            Name = "Waltz No. 2",
                            PreviewId = "29ad8ca9-c791-4482-8a44-15776862b282",
                            ReleaseYear = 1938,
                            Type = 1
                        },
                        new
                        {
                            Id = "e601298e-b442-44c1-8db2-edee0a3d88ee",
                            AuthorId = "6ab5f033-6eda-45e9-a889-17094797a6b4",
                            Name = "Fantaisie-Impromptu",
                            PreviewId = "4180556e-5365-4b9c-aa72-a47241346855",
                            ReleaseYear = 1834,
                            Type = 1
                        },
                        new
                        {
                            Id = "024e54cc-ea66-46bc-8a72-543e876c4b0e",
                            AuthorId = "fdccb59b-5fd7-4681-b512-2562c1c45ed9",
                            Name = "The Tale of Tsar Saltan",
                            PreviewId = "cdbc9b43-ee1b-4a64-8b2d-d579522ea84f",
                            ReleaseYear = 1900,
                            Type = 0
                        },
                        new
                        {
                            Id = "640c8d09-e490-4168-b583-f8b7a0371a14",
                            AuthorId = "5bc871d2-a0cb-4ef2-b277-a75907efbad7",
                            Name = "Grandes études de Paganini",
                            PreviewId = "864239f6-65c5-440f-8326-213b3b25693f",
                            ReleaseYear = 1851,
                            Type = 0
                        },
                        new
                        {
                            Id = "a67c3903-49d4-45eb-ae48-da70bff46750",
                            AuthorId = "5bc871d2-a0cb-4ef2-b277-a75907efbad7",
                            Name = "Liebestraum",
                            PreviewId = "44f268c1-3e94-4d05-8ccb-17c2e77b538d",
                            ReleaseYear = 1850,
                            Type = 0
                        },
                        new
                        {
                            Id = "bbbc51c3-86fe-4ba5-b832-e54488b44031",
                            AuthorId = "e86f359c-cdcb-4c79-91b0-b1946a80725e",
                            Name = "Lettre à ma mère",
                            PreviewId = "5a9ba216-9883-471d-9c0f-4c3d37e4ec34",
                            ReleaseYear = 1979,
                            Type = 0
                        },
                        new
                        {
                            Id = "c8eabf33-6683-44c9-b650-fc91c65cd5a5",
                            AuthorId = "b47db1d1-ffc4-4fe6-8b72-b23566fec5f3",
                            Name = "Requiem",
                            PreviewId = "9d0a67df-6fb4-4fac-b670-49a5f590beb7",
                            ReleaseYear = 1791,
                            Type = 0
                        },
                        new
                        {
                            Id = "25097b5e-b6c9-43a7-b414-ee1f3b34c967",
                            AuthorId = "b47db1d1-ffc4-4fe6-8b72-b23566fec5f3",
                            Name = "The marriage of Figaro",
                            PreviewId = "15fa89e4-7777-4330-b32e-62172cd398c0",
                            ReleaseYear = 1786,
                            Type = 0
                        },
                        new
                        {
                            Id = "90dae04f-ebb7-4b10-99c5-b128d3892db1",
                            AuthorId = "eee983b0-d055-4ee0-876e-3c5ddf07a3af",
                            Name = "Violin Concerto No. 2",
                            PreviewId = "493afb2c-eb2a-4eab-9e4e-6585eb9924ae",
                            ReleaseYear = 1826,
                            Type = 0
                        },
                        new
                        {
                            Id = "c451ab41-143c-4264-bdd9-5f36b2d9cb2c",
                            AuthorId = "a7a62662-bcd7-4139-9583-1d7bd01c2817",
                            Name = "Whenever you need somebody",
                            PreviewId = "572cc6a2-a5ba-47f5-8819-8330770cf8b5",
                            ReleaseYear = 1987,
                            Type = 0
                        },
                        new
                        {
                            Id = "31285c3e-faa9-4102-95f6-ba7ea0c73499",
                            AuthorId = "ddf5c16d-dbc9-484a-a2ca-d5e57ec9651a",
                            Name = "Valse-Scherzo",
                            PreviewId = "36febf49-1c49-4b69-8084-73ebce69040a",
                            ReleaseYear = 1877,
                            Type = 0
                        },
                        new
                        {
                            Id = "1f860290-a43c-4259-af14-cade2803ecc5",
                            AuthorId = "b47db1d1-ffc4-4fe6-8b72-b23566fec5f3",
                            Name = "Piano Sonata No. 11",
                            PreviewId = "b26e8131-28bf-4ae9-842b-33b3d639b08e",
                            ReleaseYear = 1784,
                            Type = 0
                        },
                        new
                        {
                            Id = "707bbd8c-e1b2-46d5-b26f-e159f4cbadd1",
                            AuthorId = "5bc871d2-a0cb-4ef2-b277-a75907efbad7",
                            Name = "Hungarian Rhapsodies",
                            PreviewId = "0a8c3ca2-56ca-4534-a426-648854e61821",
                            ReleaseYear = 1885,
                            Type = 0
                        });
                });

            modelBuilder.Entity("Models.Entities.Author", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = "b47db1d1-ffc4-4fe6-8b72-b23566fec5f3",
                            Name = "Wolfgang Amadeus Mozart",
                            UserId = "738c53fb-48b6-4e0b-8095-1dce9b922e43"
                        },
                        new
                        {
                            Id = "7c2f4604-c265-469f-9233-daa5f2144291",
                            Name = "Antonio Lucio Vivaldi",
                            UserId = "5035e219-ff1e-4c59-a0d8-4402c070f3cd"
                        },
                        new
                        {
                            Id = "a4e4d550-8d6d-41c3-83f6-30b7b733db2f",
                            Name = "Ludwig van Beethoven",
                            UserId = "2d3d3acf-89ee-4aec-b93c-d85e4023b576"
                        },
                        new
                        {
                            Id = "0fbecaf3-2ffc-4764-bcae-673a9ce80728",
                            Name = "Dmitri Shostakovich",
                            UserId = "aefbbdf1-0a14-4fd2-b166-58adcc3ef163"
                        },
                        new
                        {
                            Id = "6ab5f033-6eda-45e9-a889-17094797a6b4",
                            Name = "Frédéric Chopin",
                            UserId = "024e188a-0973-46b8-beb4-9ef04c4308c9"
                        },
                        new
                        {
                            Id = "fdccb59b-5fd7-4681-b512-2562c1c45ed9",
                            Name = "Nikolai Rimsky-Korsakov",
                            UserId = "2863173a-a2c0-431b-b1fa-46215c4499b1"
                        },
                        new
                        {
                            Id = "5bc871d2-a0cb-4ef2-b277-a75907efbad7",
                            Name = "Franz Liszt",
                            UserId = "ce704991-4644-41c8-9ec4-1a3a4707972f"
                        },
                        new
                        {
                            Id = "e86f359c-cdcb-4c79-91b0-b1946a80725e",
                            Name = "Paul de Senneville",
                            UserId = "892aeaf4-133e-4f22-afa7-e7e7c7ae2a8c"
                        },
                        new
                        {
                            Id = "eee983b0-d055-4ee0-876e-3c5ddf07a3af",
                            Name = "Niccolò Paganini",
                            UserId = "289a34e5-3cc1-4778-9497-373faa01cb26"
                        },
                        new
                        {
                            Id = "a7a62662-bcd7-4139-9583-1d7bd01c2817",
                            Name = "Rick Astley",
                            UserId = "46e5bb17-b9ca-4ff0-8933-caef9293bbd0"
                        },
                        new
                        {
                            Id = "ddf5c16d-dbc9-484a-a2ca-d5e57ec9651a",
                            Name = "Pyotr Tchaikovsky",
                            UserId = "53b6e292-6a58-4fec-bfd8-eab933e8c765"
                        });
                });

            modelBuilder.Entity("Models.Entities.Genre", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = "f17d84ce-6469-4aa8-be38-af5824e20251",
                            Name = "Classic"
                        },
                        new
                        {
                            Id = "f8bef1e2-f319-42b5-add2-74bac63cc8d8",
                            Name = "Instrumental"
                        },
                        new
                        {
                            Id = "eacfbc05-916a-40bd-8dcd-cde617809889",
                            Name = "Jazz"
                        },
                        new
                        {
                            Id = "3f77186e-d17a-494f-9d09-97800bd4bf13",
                            Name = "New Age"
                        },
                        new
                        {
                            Id = "07d61508-81ed-407f-bad4-f174d5bd6c6b",
                            Name = "Pop"
                        });
                });

            modelBuilder.Entity("Models.Entities.Playlist", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OwnerId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("Models.Entities.Track", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AlbumId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            Id = "dc897690-3cb4-4d8b-b9e5-d38f2280f977",
                            AlbumId = "6004f73f-24f3-4ee2-891f-c273fec9a7fb",
                            FileId = "7c561b1e-3070-4e83-b71a-2fd7a69fa040",
                            Name = "Summer - Storm"
                        },
                        new
                        {
                            Id = "1424871f-5288-44c8-9f8c-23a37eb30a08",
                            AlbumId = "6004f73f-24f3-4ee2-891f-c273fec9a7fb",
                            FileId = "9f1d7cfd-53c6-478f-82e2-db737d1b9ecf",
                            Name = "Spring"
                        },
                        new
                        {
                            Id = "2cd900d8-247c-43a4-9785-71ff8233dc36",
                            AlbumId = "6c71ddc7-99bd-4f52-927f-a7fe484b81f4",
                            FileId = "e6a51aae-2ee3-4253-8b9c-1e88e65f0efb",
                            Name = "Moonlight Sonata"
                        },
                        new
                        {
                            Id = "41ec0bc5-0e18-4d29-bad5-c0ed1bab2b5a",
                            AlbumId = "4bd78fad-e877-4eb5-af51-7ad51cba7cf4",
                            FileId = "29ad8ca9-c791-4482-8a44-15776862b282",
                            Name = "Waltz No. 2"
                        },
                        new
                        {
                            Id = "fd2efa06-8bbe-4347-b37c-daaf274030c8",
                            AlbumId = "e601298e-b442-44c1-8db2-edee0a3d88ee",
                            FileId = "4180556e-5365-4b9c-aa72-a47241346855",
                            Name = "Fantaisie Impromptu"
                        },
                        new
                        {
                            Id = "84c27b56-8acc-4a7b-8393-425f7a176f5e",
                            AlbumId = "024e54cc-ea66-46bc-8a72-543e876c4b0e",
                            FileId = "4180556e-5365-4b9c-aa72-a47241346855",
                            Name = "Flight of the Bumblebee"
                        },
                        new
                        {
                            Id = "6ffbfa47-bd61-4119-a795-7c57abb8da38",
                            AlbumId = "640c8d09-e490-4168-b583-f8b7a0371a14",
                            FileId = "864239f6-65c5-440f-8326-213b3b25693f",
                            Name = "La Campanella"
                        },
                        new
                        {
                            Id = "83fd9d41-cef3-4525-8b8b-79e4a747ae49",
                            AlbumId = "a67c3903-49d4-45eb-ae48-da70bff46750",
                            FileId = "44f268c1-3e94-4d05-8ccb-17c2e77b538d",
                            Name = "Love Dream"
                        },
                        new
                        {
                            Id = "2a9d0aef-72a9-476b-a205-576dfd8d22e5",
                            AlbumId = "bbbc51c3-86fe-4ba5-b832-e54488b44031",
                            FileId = "15fa89e4-7777-4330-b32e-62172cd398c0",
                            Name = "Marriage d'Amour"
                        },
                        new
                        {
                            Id = "670ee60d-6d82-49dd-96c1-91fe952e838d",
                            AlbumId = "c8eabf33-6683-44c9-b650-fc91c65cd5a5",
                            FileId = "9d0a67df-6fb4-4fac-b670-49a5f590beb7",
                            Name = "Lacrimosa"
                        },
                        new
                        {
                            Id = "50d69e0c-d42b-41a9-9190-2db74a045310",
                            AlbumId = "25097b5e-b6c9-43a7-b414-ee1f3b34c967",
                            FileId = "15fa89e4-7777-4330-b32e-62172cd398c0",
                            Name = "Marriage of Figaro - Overture"
                        },
                        new
                        {
                            Id = "f03c8e7c-9810-4d7f-ba5c-0f56f988692d",
                            AlbumId = "90dae04f-ebb7-4b10-99c5-b128d3892db1",
                            FileId = "493afb2c-eb2a-4eab-9e4e-6585eb9924ae",
                            Name = "La Campanella"
                        },
                        new
                        {
                            Id = "ee324949-8fd7-45c3-9671-621285745083",
                            AlbumId = "c451ab41-143c-4264-bdd9-5f36b2d9cb2c",
                            FileId = "572cc6a2-a5ba-47f5-8819-8330770cf8b5",
                            Name = "Never gonna give you up"
                        },
                        new
                        {
                            Id = "7b48fb6a-72bd-4879-ade4-f6bcc49122be",
                            AlbumId = "31285c3e-faa9-4102-95f6-ba7ea0c73499",
                            FileId = "36febf49-1c49-4b69-8084-73ebce69040a",
                            Name = "Valse Sentimental"
                        },
                        new
                        {
                            Id = "baa8ad77-a427-4167-b833-f83743cfa509",
                            AlbumId = "1f860290-a43c-4259-af14-cade2803ecc5",
                            FileId = "b26e8131-28bf-4ae9-842b-33b3d639b08e",
                            Name = "Turkish March"
                        },
                        new
                        {
                            Id = "55eddeb2-08b2-4ec0-bdb6-e7dd8ed6894d",
                            AlbumId = "707bbd8c-e1b2-46d5-b26f-e159f4cbadd1",
                            FileId = "2d47fb0d-971c-44e5-9d76-8b5589f0cbbb",
                            Name = "Hungarian Rhapsody No. 2"
                        });
                });

            modelBuilder.Entity("Models.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("UserName", "Email")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "738c53fb-48b6-4e0b-8095-1dce9b922e43",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "46d2643a-c5ed-47e9-b8db-a349efde2c30",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Wolfgang Amadeus Mozart",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "92d4de25-b01a-4c20-b684-fb2751b0d69f",
                            TwoFactorEnabled = false,
                            UserName = "mozart"
                        },
                        new
                        {
                            Id = "5035e219-ff1e-4c59-a0d8-4402c070f3cd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fd8e5958-55de-4eca-8c9a-7b062b390a91",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Antonio Lucio Vivaldi",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "daf611a7-8fb6-479e-93bc-6c868b40f25e",
                            TwoFactorEnabled = false,
                            UserName = "vivaldi"
                        },
                        new
                        {
                            Id = "2d3d3acf-89ee-4aec-b93c-d85e4023b576",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a5813d93-e05f-4996-82b2-41d8d2170258",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Ludwig van Beethoven",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "18defe03-7ff5-48b0-9548-74d6202f3305",
                            TwoFactorEnabled = false,
                            UserName = "beethoven"
                        },
                        new
                        {
                            Id = "aefbbdf1-0a14-4fd2-b166-58adcc3ef163",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d2a22672-f0e6-43ff-9967-fed75fdfd751",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Dmitri Shostakovich",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "b0e36524-eb1f-4641-be54-3caf0035e426",
                            TwoFactorEnabled = false,
                            UserName = "shostakovich"
                        },
                        new
                        {
                            Id = "024e188a-0973-46b8-beb4-9ef04c4308c9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d1ea8c40-13a9-47f4-aed5-09608dba6917",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Frédéric Chopin",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "5d58440f-2c9c-4406-82c3-9c715931c0ca",
                            TwoFactorEnabled = false,
                            UserName = "chopin"
                        },
                        new
                        {
                            Id = "2863173a-a2c0-431b-b1fa-46215c4499b1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "79ea96fe-4333-44aa-9081-2d3c5c33e4d1",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Nikolai Rimsky-Korsakov",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "bced2c4e-4a70-42e3-8d39-b84a2b3b5b5d",
                            TwoFactorEnabled = false,
                            UserName = "rimsky-korsakov"
                        },
                        new
                        {
                            Id = "ce704991-4644-41c8-9ec4-1a3a4707972f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "66ad81dd-c195-4362-b934-efcfdf36264c",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Franz Liszt",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "216c4fcf-9b35-476e-b99e-a34a981241ba",
                            TwoFactorEnabled = false,
                            UserName = "liszt"
                        },
                        new
                        {
                            Id = "892aeaf4-133e-4f22-afa7-e7e7c7ae2a8c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "834b2e27-f66a-47f8-bc49-0496b95465e0",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Paul de Senneville",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "6e5835ea-a282-4687-a95b-660f1df77c15",
                            TwoFactorEnabled = false,
                            UserName = "senneville"
                        },
                        new
                        {
                            Id = "289a34e5-3cc1-4778-9497-373faa01cb26",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ac68d594-6236-44b7-9c0c-5f752dafa9c2",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Niccolò Paganini",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "ce9ac26b-4d19-4f94-9372-142b57975fa9",
                            TwoFactorEnabled = false,
                            UserName = "paganini"
                        },
                        new
                        {
                            Id = "46e5bb17-b9ca-4ff0-8933-caef9293bbd0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8bae5fd9-8273-4c60-934b-d1aec5ced422",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Rick Astley",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "c89ccad2-dd62-4ecf-90f4-0b546dbc9835",
                            TwoFactorEnabled = false,
                            UserName = "astley"
                        },
                        new
                        {
                            Id = "53b6e292-6a58-4fec-bfd8-eab933e8c765",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b7755c69-d694-4610-8421-63c1c13ec7b1",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Pyotr Tchaikovsky",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "88a8a550-25e9-4ada-be7c-56e9317b7313",
                            TwoFactorEnabled = false,
                            UserName = "tchaikovsky"
                        });
                });

            modelBuilder.Entity("PlaylistTrack", b =>
                {
                    b.Property<string>("InPlaylistsId")
                        .HasColumnType("text");

                    b.Property<string>("TracksId")
                        .HasColumnType("text");

                    b.HasKey("InPlaylistsId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("PlaylistTrack");
                });

            modelBuilder.Entity("TrackUser", b =>
                {
                    b.Property<string>("HistoryId")
                        .HasColumnType("text");

                    b.Property<string>("HistoryId1")
                        .HasColumnType("text");

                    b.HasKey("HistoryId", "HistoryId1");

                    b.HasIndex("HistoryId1");

                    b.ToTable("TrackUser");
                });

            modelBuilder.Entity("GenreTrack", b =>
                {
                    b.HasOne("Models.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Entities.Album", b =>
                {
                    b.HasOne("Models.Entities.Author", "Author")
                        .WithMany("Albums")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Models.Entities.Author", b =>
                {
                    b.HasOne("Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Entities.Playlist", b =>
                {
                    b.HasOne("Models.Entities.User", "Owner")
                        .WithMany("Playlists")
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Models.Entities.Track", b =>
                {
                    b.HasOne("Models.Entities.Album", "Album")
                        .WithMany("Tracks")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");
                });

            modelBuilder.Entity("PlaylistTrack", b =>
                {
                    b.HasOne("Models.Entities.Playlist", null)
                        .WithMany()
                        .HasForeignKey("InPlaylistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TrackUser", b =>
                {
                    b.HasOne("Models.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("HistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("HistoryId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Entities.Album", b =>
                {
                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("Models.Entities.Author", b =>
                {
                    b.Navigation("Albums");
                });

            modelBuilder.Entity("Models.Entities.User", b =>
                {
                    b.Navigation("Playlists");
                });
#pragma warning restore 612, 618
        }
    }
}
