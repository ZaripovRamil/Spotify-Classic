// <auto-generated />
using System;
using System.Collections.Generic;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Database.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230411135001_returnedGenres")]
    partial class returnedGenres
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GenreTrack", b =>
                {
                    b.Property<string>("GenresId")
                        .HasColumnType("text");

                    b.Property<string>("TracksId")
                        .HasColumnType("text");

                    b.HasKey("GenresId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("GenreTrack");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Models.Entities.Album", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PreviewId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Albums");

                    b.HasData(
                        new
                        {
                            Id = "ce4263ad-20f4-42f1-9d69-7decfb2a783c",
                            AuthorId = "98be3aee-202c-47c6-817d-4178ba0623f5",
                            Name = "The Four Seasons",
                            PreviewId = "7c561b1e-3070-4e83-b71a-2fd7a69fa040",
                            ReleaseYear = 1725,
                            Type = 0
                        },
                        new
                        {
                            Id = "51b01e4a-f2d1-4310-9b87-e319d4220810",
                            AuthorId = "94cb5113-f1e5-455c-a2e6-08f585d67d8a",
                            Name = "Moonlight Sonata",
                            PreviewId = "e6a51aae-2ee3-4253-8b9c-1e88e65f0efb",
                            ReleaseYear = 1802,
                            Type = 1
                        },
                        new
                        {
                            Id = "9f154aa2-2a48-4694-858e-963c63d21d07",
                            AuthorId = "2a47bc3f-d0a9-484f-a6a9-c5ad50cfae4b",
                            Name = "Waltz No. 2",
                            PreviewId = "29ad8ca9-c791-4482-8a44-15776862b282",
                            ReleaseYear = 1938,
                            Type = 1
                        },
                        new
                        {
                            Id = "1808b0a6-3449-4b89-8b9b-984352b2d531",
                            AuthorId = "ba2e98ce-28ab-4c0a-9424-09e824c4eeca",
                            Name = "Fantaisie-Impromptu",
                            PreviewId = "4180556e-5365-4b9c-aa72-a47241346855",
                            ReleaseYear = 1834,
                            Type = 1
                        },
                        new
                        {
                            Id = "657b04d7-3d14-4c75-a972-acb7fb985179",
                            AuthorId = "866a3a04-9b5b-42b6-84fe-2fbc6c29dfe0",
                            Name = "The Tale of Tsar Saltan",
                            PreviewId = "cdbc9b43-ee1b-4a64-8b2d-d579522ea84f",
                            ReleaseYear = 1900,
                            Type = 0
                        },
                        new
                        {
                            Id = "9b3eb542-b5a0-4e97-aab5-36f21b7b5bfa",
                            AuthorId = "f6b2b8e8-0bc0-4fc7-a12a-43f88d935fad",
                            Name = "Grandes études de Paganini",
                            PreviewId = "864239f6-65c5-440f-8326-213b3b25693f",
                            ReleaseYear = 1851,
                            Type = 0
                        },
                        new
                        {
                            Id = "de41e37a-2859-4113-8624-c09bd0ef3fb2",
                            AuthorId = "f6b2b8e8-0bc0-4fc7-a12a-43f88d935fad",
                            Name = "Liebestraum",
                            PreviewId = "44f268c1-3e94-4d05-8ccb-17c2e77b538d",
                            ReleaseYear = 1850,
                            Type = 0
                        },
                        new
                        {
                            Id = "2c9afde7-00a2-47c7-9f89-21e81d2059a2",
                            AuthorId = "2b9f02ca-1333-4541-96a0-8ffc8eef999a",
                            Name = "Lettre à ma mère",
                            PreviewId = "5a9ba216-9883-471d-9c0f-4c3d37e4ec34",
                            ReleaseYear = 1979,
                            Type = 0
                        },
                        new
                        {
                            Id = "4525ec0d-82ae-421f-a397-080d54fe12a9",
                            AuthorId = "ec81dc60-7de8-4dbe-bab3-6210ba36274a",
                            Name = "Requiem",
                            PreviewId = "9d0a67df-6fb4-4fac-b670-49a5f590beb7",
                            ReleaseYear = 1791,
                            Type = 0
                        },
                        new
                        {
                            Id = "841f37bb-28b8-46f4-84c5-b298202cf181",
                            AuthorId = "ec81dc60-7de8-4dbe-bab3-6210ba36274a",
                            Name = "The marriage of Figaro",
                            PreviewId = "15fa89e4-7777-4330-b32e-62172cd398c0",
                            ReleaseYear = 1786,
                            Type = 0
                        },
                        new
                        {
                            Id = "aa2eb3f8-e71e-46a4-8aa0-fa1424b0016a",
                            AuthorId = "8f015e90-2ee1-4c16-9ecc-d0b0e92e9eed",
                            Name = "Violin Concerto No. 2",
                            PreviewId = "493afb2c-eb2a-4eab-9e4e-6585eb9924ae",
                            ReleaseYear = 1826,
                            Type = 0
                        },
                        new
                        {
                            Id = "1adb2fa3-7e9c-4f2a-aec7-459de571b845",
                            AuthorId = "bc974f7a-f548-41a3-88fe-4e9fdc342e37",
                            Name = "Whenever you need somebody",
                            PreviewId = "572cc6a2-a5ba-47f5-8819-8330770cf8b5",
                            ReleaseYear = 1987,
                            Type = 0
                        },
                        new
                        {
                            Id = "b1be80cc-74b2-4607-ad1f-1b767c651db5",
                            AuthorId = "b24e0d80-4cf1-4f25-b4fc-efe6359b52cc",
                            Name = "Valse-Scherzo",
                            PreviewId = "36febf49-1c49-4b69-8084-73ebce69040a",
                            ReleaseYear = 1877,
                            Type = 0
                        },
                        new
                        {
                            Id = "5b75529c-33ad-4ede-8dfd-229c6118a0d7",
                            AuthorId = "ec81dc60-7de8-4dbe-bab3-6210ba36274a",
                            Name = "Piano Sonata No. 11",
                            PreviewId = "b26e8131-28bf-4ae9-842b-33b3d639b08e",
                            ReleaseYear = 1784,
                            Type = 0
                        },
                        new
                        {
                            Id = "d57502b0-b0be-471c-8068-c96886ae5e33",
                            AuthorId = "f6b2b8e8-0bc0-4fc7-a12a-43f88d935fad",
                            Name = "Hungarian Rhapsodies",
                            PreviewId = "0a8c3ca2-56ca-4534-a426-648854e61821",
                            ReleaseYear = 1885,
                            Type = 0
                        });
                });

            modelBuilder.Entity("Models.Entities.Author", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = "ec81dc60-7de8-4dbe-bab3-6210ba36274a",
                            Name = "Wolfgang Amadeus Mozart",
                            UserId = "52880029-38d5-4967-a1ca-bb16439b887f"
                        },
                        new
                        {
                            Id = "98be3aee-202c-47c6-817d-4178ba0623f5",
                            Name = "Antonio Lucio Vivaldi",
                            UserId = "1b735957-adbc-4a8e-945c-4c4cd60548a4"
                        },
                        new
                        {
                            Id = "94cb5113-f1e5-455c-a2e6-08f585d67d8a",
                            Name = "Ludwig van Beethoven",
                            UserId = "7f1166ab-1d18-4243-806c-da8c296c5306"
                        },
                        new
                        {
                            Id = "2a47bc3f-d0a9-484f-a6a9-c5ad50cfae4b",
                            Name = "Dmitri Shostakovich",
                            UserId = "3498a7c1-d79f-46a9-bedc-0bb5adde22e6"
                        },
                        new
                        {
                            Id = "ba2e98ce-28ab-4c0a-9424-09e824c4eeca",
                            Name = "Frédéric Chopin",
                            UserId = "2ca180d5-f153-41a3-a1c6-c80bf4a77830"
                        },
                        new
                        {
                            Id = "866a3a04-9b5b-42b6-84fe-2fbc6c29dfe0",
                            Name = "Nikolai Rimsky-Korsakov",
                            UserId = "d454763e-9d83-4772-bcb3-731e39c09e14"
                        },
                        new
                        {
                            Id = "f6b2b8e8-0bc0-4fc7-a12a-43f88d935fad",
                            Name = "Franz Liszt",
                            UserId = "1f857633-e653-4834-80f8-f032153bf42a"
                        },
                        new
                        {
                            Id = "2b9f02ca-1333-4541-96a0-8ffc8eef999a",
                            Name = "Paul de Senneville",
                            UserId = "94df1be8-7ef4-4029-93b3-2f7ce724981c"
                        },
                        new
                        {
                            Id = "8f015e90-2ee1-4c16-9ecc-d0b0e92e9eed",
                            Name = "Niccolò Paganini",
                            UserId = "281e5b90-9649-4e66-bf01-8c80e5bb2d01"
                        },
                        new
                        {
                            Id = "bc974f7a-f548-41a3-88fe-4e9fdc342e37",
                            Name = "Rick Astley",
                            UserId = "ac593f00-1e1f-41d5-941c-1164620effe2"
                        },
                        new
                        {
                            Id = "b24e0d80-4cf1-4f25-b4fc-efe6359b52cc",
                            Name = "Pyotr Tchaikovsky",
                            UserId = "1fc91802-e1b7-4b07-8ffb-9a4609dca83d"
                        });
                });

            modelBuilder.Entity("Models.Entities.Genre", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = "c25c23de-0df1-4eff-af77-e05447b585bd",
                            Name = "Classic"
                        },
                        new
                        {
                            Id = "90778305-ccce-45eb-bc58-ee3bb35a104a",
                            Name = "Instrumental"
                        },
                        new
                        {
                            Id = "472fe29a-7aef-4ecb-9cee-57e044c0bca6",
                            Name = "Jazz"
                        },
                        new
                        {
                            Id = "f19d2442-1868-4e2b-a1f8-5b015e778f5b",
                            Name = "New Age"
                        },
                        new
                        {
                            Id = "76500db7-3eef-424b-a7f4-aac2e2ecaabb",
                            Name = "Pop"
                        });
                });

            modelBuilder.Entity("Models.Entities.Playlist", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OwnerId")
                        .HasColumnType("text");

                    b.Property<string>("PreviewId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("Models.Entities.Track", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AlbumId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<string>>("GenreIds")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            Id = "dee1941f-52aa-4637-92e0-5c5cc10f2576",
                            AlbumId = "ce4263ad-20f4-42f1-9d69-7decfb2a783c",
                            FileId = "7c561b1e-3070-4e83-b71a-2fd7a69fa040",
                            GenreIds = new List<string> { "c25c23de-0df1-4eff-af77-e05447b585bd", "90778305-ccce-45eb-bc58-ee3bb35a104a" },
                            Name = "Summer - Storm"
                        },
                        new
                        {
                            Id = "f0c6893d-8aa3-4def-aba8-9f760a466ce7",
                            AlbumId = "ce4263ad-20f4-42f1-9d69-7decfb2a783c",
                            FileId = "9f1d7cfd-53c6-478f-82e2-db737d1b9ecf",
                            GenreIds = new List<string> { "c25c23de-0df1-4eff-af77-e05447b585bd", "90778305-ccce-45eb-bc58-ee3bb35a104a" },
                            Name = "Spring"
                        },
                        new
                        {
                            Id = "78db65d8-4176-4e6c-a588-e97ca15dc532",
                            AlbumId = "51b01e4a-f2d1-4310-9b87-e319d4220810",
                            FileId = "e6a51aae-2ee3-4253-8b9c-1e88e65f0efb",
                            GenreIds = new List<string> { "c25c23de-0df1-4eff-af77-e05447b585bd", "90778305-ccce-45eb-bc58-ee3bb35a104a" },
                            Name = "Moonlight Sonata"
                        },
                        new
                        {
                            Id = "77c4846d-e16d-47a9-ac29-7d6c3b23d6a6",
                            AlbumId = "9f154aa2-2a48-4694-858e-963c63d21d07",
                            FileId = "29ad8ca9-c791-4482-8a44-15776862b282",
                            GenreIds = new List<string> { "c25c23de-0df1-4eff-af77-e05447b585bd", "472fe29a-7aef-4ecb-9cee-57e044c0bca6" },
                            Name = "Waltz No. 2"
                        },
                        new
                        {
                            Id = "3a5857a8-49d6-4854-942d-736d917e8f25",
                            AlbumId = "1808b0a6-3449-4b89-8b9b-984352b2d531",
                            FileId = "4180556e-5365-4b9c-aa72-a47241346855",
                            GenreIds = new List<string> { "c25c23de-0df1-4eff-af77-e05447b585bd", "90778305-ccce-45eb-bc58-ee3bb35a104a" },
                            Name = "Fantaisie Impromptu"
                        },
                        new
                        {
                            Id = "519a3206-33cd-41fb-8f98-5542159f0f4b",
                            AlbumId = "657b04d7-3d14-4c75-a972-acb7fb985179",
                            FileId = "4180556e-5365-4b9c-aa72-a47241346855",
                            GenreIds = new List<string> { "c25c23de-0df1-4eff-af77-e05447b585bd", "90778305-ccce-45eb-bc58-ee3bb35a104a" },
                            Name = "Flight of the Bumblebee"
                        },
                        new
                        {
                            Id = "bf17dffa-46a4-4a9b-a7b3-2992eb83039a",
                            AlbumId = "9b3eb542-b5a0-4e97-aab5-36f21b7b5bfa",
                            FileId = "864239f6-65c5-440f-8326-213b3b25693f",
                            GenreIds = new List<string> { "c25c23de-0df1-4eff-af77-e05447b585bd", "90778305-ccce-45eb-bc58-ee3bb35a104a" },
                            Name = "La Campanella"
                        },
                        new
                        {
                            Id = "a0c4cf5e-67ec-45b1-8e65-d5399b5c6629",
                            AlbumId = "de41e37a-2859-4113-8624-c09bd0ef3fb2",
                            FileId = "44f268c1-3e94-4d05-8ccb-17c2e77b538d",
                            GenreIds = new List<string> { "c25c23de-0df1-4eff-af77-e05447b585bd", "90778305-ccce-45eb-bc58-ee3bb35a104a" },
                            Name = "Love Dream"
                        },
                        new
                        {
                            Id = "9bdd1b97-4d63-4b06-a36e-10ba276bf34d",
                            AlbumId = "2c9afde7-00a2-47c7-9f89-21e81d2059a2",
                            FileId = "15fa89e4-7777-4330-b32e-62172cd398c0",
                            GenreIds = new List<string> { "f19d2442-1868-4e2b-a1f8-5b015e778f5b", "90778305-ccce-45eb-bc58-ee3bb35a104a" },
                            Name = "Marriage d'Amour"
                        },
                        new
                        {
                            Id = "d331ee95-fdce-4402-a829-53a66394f456",
                            AlbumId = "4525ec0d-82ae-421f-a397-080d54fe12a9",
                            FileId = "9d0a67df-6fb4-4fac-b670-49a5f590beb7",
                            GenreIds = new List<string> { "c25c23de-0df1-4eff-af77-e05447b585bd" },
                            Name = "Lacrimosa"
                        },
                        new
                        {
                            Id = "abda8157-5448-42b6-858f-4e4d8acdb9e3",
                            AlbumId = "841f37bb-28b8-46f4-84c5-b298202cf181",
                            FileId = "15fa89e4-7777-4330-b32e-62172cd398c0",
                            GenreIds = new List<string> { "c25c23de-0df1-4eff-af77-e05447b585bd", "90778305-ccce-45eb-bc58-ee3bb35a104a" },
                            Name = "Marriage of Figaro - Overture"
                        },
                        new
                        {
                            Id = "26996074-f474-4fe9-9058-b9fe492018f1",
                            AlbumId = "aa2eb3f8-e71e-46a4-8aa0-fa1424b0016a",
                            FileId = "493afb2c-eb2a-4eab-9e4e-6585eb9924ae",
                            GenreIds = new List<string> { "c25c23de-0df1-4eff-af77-e05447b585bd", "90778305-ccce-45eb-bc58-ee3bb35a104a" },
                            Name = "La Campanella"
                        },
                        new
                        {
                            Id = "2cd36eb6-6239-4e12-a56d-c63f648c9220",
                            AlbumId = "1adb2fa3-7e9c-4f2a-aec7-459de571b845",
                            FileId = "572cc6a2-a5ba-47f5-8819-8330770cf8b5",
                            GenreIds = new List<string> { "76500db7-3eef-424b-a7f4-aac2e2ecaabb" },
                            Name = "Never gonna give you up"
                        },
                        new
                        {
                            Id = "26b9aaba-780e-4078-b995-c67353fdefb3",
                            AlbumId = "b1be80cc-74b2-4607-ad1f-1b767c651db5",
                            FileId = "36febf49-1c49-4b69-8084-73ebce69040a",
                            GenreIds = new List<string> { "c25c23de-0df1-4eff-af77-e05447b585bd", "90778305-ccce-45eb-bc58-ee3bb35a104a" },
                            Name = "Valse Sentimental"
                        },
                        new
                        {
                            Id = "5cf44909-9895-4602-8f21-1b8de5fe99b5",
                            AlbumId = "5b75529c-33ad-4ede-8dfd-229c6118a0d7",
                            FileId = "b26e8131-28bf-4ae9-842b-33b3d639b08e",
                            GenreIds = new List<string> { "c25c23de-0df1-4eff-af77-e05447b585bd", "90778305-ccce-45eb-bc58-ee3bb35a104a" },
                            Name = "Turkish March"
                        },
                        new
                        {
                            Id = "6b057b64-211d-4af5-bf12-a200f3bbfdcf",
                            AlbumId = "d57502b0-b0be-471c-8068-c96886ae5e33",
                            FileId = "2d47fb0d-971c-44e5-9d76-8b5589f0cbbb",
                            GenreIds = new List<string> { "c25c23de-0df1-4eff-af77-e05447b585bd", "90778305-ccce-45eb-bc58-ee3bb35a104a" },
                            Name = "Hungarian Rhapsody No. 2"
                        });
                });

            modelBuilder.Entity("Models.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("UserName", "Email")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "52880029-38d5-4967-a1ca-bb16439b887f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5091b36b-aa2f-4795-8348-df1359d1615c",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Wolfgang Amadeus Mozart",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "6c1cb145-8146-4d00-8c6c-52f2e02681c9",
                            TwoFactorEnabled = false,
                            UserName = "mozart"
                        },
                        new
                        {
                            Id = "1b735957-adbc-4a8e-945c-4c4cd60548a4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0d0d0843-3233-47ea-8685-6d3df360608f",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Antonio Lucio Vivaldi",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "d80a7852-2c7b-46dd-a3ba-600fc9c67d8a",
                            TwoFactorEnabled = false,
                            UserName = "vivaldi"
                        },
                        new
                        {
                            Id = "7f1166ab-1d18-4243-806c-da8c296c5306",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1a60d36b-3cfc-4850-b3f4-40e93c693434",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Ludwig van Beethoven",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "f07544c9-8be6-463a-9414-3b33f61ca2a7",
                            TwoFactorEnabled = false,
                            UserName = "beethoven"
                        },
                        new
                        {
                            Id = "3498a7c1-d79f-46a9-bedc-0bb5adde22e6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "440092e6-23a1-40a8-8989-4d5a5b00f477",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Dmitri Shostakovich",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "53716b38-8055-4f5c-9ab1-aee3a75c2069",
                            TwoFactorEnabled = false,
                            UserName = "shostakovich"
                        },
                        new
                        {
                            Id = "2ca180d5-f153-41a3-a1c6-c80bf4a77830",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6ffe3a01-cc31-4a71-891d-aa64766af013",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Frédéric Chopin",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "aa54f185-16e1-4083-ae6f-3a8e0bf5ce9b",
                            TwoFactorEnabled = false,
                            UserName = "chopin"
                        },
                        new
                        {
                            Id = "d454763e-9d83-4772-bcb3-731e39c09e14",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "be8de764-056d-4b4d-8220-9d3b329fbafd",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Nikolai Rimsky-Korsakov",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "95712b7c-229b-4b78-b348-3285b15280c4",
                            TwoFactorEnabled = false,
                            UserName = "rimsky-korsakov"
                        },
                        new
                        {
                            Id = "1f857633-e653-4834-80f8-f032153bf42a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "482f5707-bd07-47a3-84d8-abad8dfd361f",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Franz Liszt",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "03a4942d-dc06-4d89-9443-965d9b8fef78",
                            TwoFactorEnabled = false,
                            UserName = "liszt"
                        },
                        new
                        {
                            Id = "94df1be8-7ef4-4029-93b3-2f7ce724981c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "79fcb1da-7c35-43de-8494-66f2f584e48a",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Paul de Senneville",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "14f8a72c-b93e-4565-a24f-8ae209d36495",
                            TwoFactorEnabled = false,
                            UserName = "senneville"
                        },
                        new
                        {
                            Id = "281e5b90-9649-4e66-bf01-8c80e5bb2d01",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "25288032-368f-4e9e-80ec-f9cbc564c29b",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Niccolò Paganini",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "147d93d6-e9ae-451b-8307-26e4cf6a5ed9",
                            TwoFactorEnabled = false,
                            UserName = "paganini"
                        },
                        new
                        {
                            Id = "ac593f00-1e1f-41d5-941c-1164620effe2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ed152ed7-a4d9-40be-ba44-ce1860afeba0",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Rick Astley",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "b8d8f2e8-c272-4079-af5c-f9349861e6dd",
                            TwoFactorEnabled = false,
                            UserName = "astley"
                        },
                        new
                        {
                            Id = "1fc91802-e1b7-4b07-8ffb-9a4609dca83d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e66e8cf9-570e-4856-977b-14c522aa17af",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Pyotr Tchaikovsky",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "4103975c-53ce-4158-883c-7c749e983d94",
                            TwoFactorEnabled = false,
                            UserName = "tchaikovsky"
                        });
                });

            modelBuilder.Entity("PlaylistTrack", b =>
                {
                    b.Property<string>("InPlaylistsId")
                        .HasColumnType("text");

                    b.Property<string>("TracksId")
                        .HasColumnType("text");

                    b.HasKey("InPlaylistsId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("PlaylistTrack");
                });

            modelBuilder.Entity("TrackUser", b =>
                {
                    b.Property<string>("HistoryId")
                        .HasColumnType("text");

                    b.Property<string>("HistoryId1")
                        .HasColumnType("text");

                    b.HasKey("HistoryId", "HistoryId1");

                    b.HasIndex("HistoryId1");

                    b.ToTable("TrackUser");
                });

            modelBuilder.Entity("GenreTrack", b =>
                {
                    b.HasOne("Models.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Entities.Album", b =>
                {
                    b.HasOne("Models.Entities.Author", "Author")
                        .WithMany("Albums")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Models.Entities.Author", b =>
                {
                    b.HasOne("Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Entities.Playlist", b =>
                {
                    b.HasOne("Models.Entities.User", "Owner")
                        .WithMany("Playlists")
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Models.Entities.Track", b =>
                {
                    b.HasOne("Models.Entities.Album", "Album")
                        .WithMany("Tracks")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");
                });

            modelBuilder.Entity("PlaylistTrack", b =>
                {
                    b.HasOne("Models.Entities.Playlist", null)
                        .WithMany()
                        .HasForeignKey("InPlaylistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TrackUser", b =>
                {
                    b.HasOne("Models.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("HistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("HistoryId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Entities.Album", b =>
                {
                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("Models.Entities.Author", b =>
                {
                    b.Navigation("Albums");
                });

            modelBuilder.Entity("Models.Entities.User", b =>
                {
                    b.Navigation("Playlists");
                });
#pragma warning restore 612, 618
        }
    }
}
