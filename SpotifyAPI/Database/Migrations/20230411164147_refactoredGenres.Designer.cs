// <auto-generated />
using System;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Database.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230411164147_refactoredGenres")]
    partial class refactoredGenres
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Models.Entities.Album", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PreviewId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Albums");

                    b.HasData(
                        new
                        {
                            Id = "17409b22-0079-4b29-b79b-d5e99718e249",
                            AuthorId = "aabbbcbd-81c4-400b-94ce-22c28c5010a9",
                            Name = "The Four Seasons",
                            PreviewId = "7c561b1e-3070-4e83-b71a-2fd7a69fa040",
                            ReleaseYear = 1725,
                            Type = 0
                        },
                        new
                        {
                            Id = "a184871f-858c-4c9a-b8cf-99c314373c21",
                            AuthorId = "98c18ea1-1470-489b-90a9-0c3a7104ad19",
                            Name = "Moonlight Sonata",
                            PreviewId = "e6a51aae-2ee3-4253-8b9c-1e88e65f0efb",
                            ReleaseYear = 1802,
                            Type = 1
                        },
                        new
                        {
                            Id = "db762ffd-8186-44ce-99b7-61ce6c41759c",
                            AuthorId = "f7a377de-06df-4328-8660-540de961010c",
                            Name = "Waltz No. 2",
                            PreviewId = "29ad8ca9-c791-4482-8a44-15776862b282",
                            ReleaseYear = 1938,
                            Type = 1
                        },
                        new
                        {
                            Id = "d638c3e6-a394-4f9b-aa74-5c3e1af30c03",
                            AuthorId = "9edece38-8e1d-4a05-a4a3-8ced7f913100",
                            Name = "Fantaisie-Impromptu",
                            PreviewId = "4180556e-5365-4b9c-aa72-a47241346855",
                            ReleaseYear = 1834,
                            Type = 1
                        },
                        new
                        {
                            Id = "1c7577da-ae0d-47c5-9709-e40b479b6561",
                            AuthorId = "13e94b58-46d9-4dd2-b3ab-5e69cd0d66b8",
                            Name = "The Tale of Tsar Saltan",
                            PreviewId = "cdbc9b43-ee1b-4a64-8b2d-d579522ea84f",
                            ReleaseYear = 1900,
                            Type = 0
                        },
                        new
                        {
                            Id = "32896a09-b2eb-45a4-9c3e-ef4ed45a424b",
                            AuthorId = "db88345d-d07e-4701-bd80-dee0f0ab2da9",
                            Name = "Grandes études de Paganini",
                            PreviewId = "864239f6-65c5-440f-8326-213b3b25693f",
                            ReleaseYear = 1851,
                            Type = 0
                        },
                        new
                        {
                            Id = "483ce399-4688-41e2-8a09-075a638769c7",
                            AuthorId = "db88345d-d07e-4701-bd80-dee0f0ab2da9",
                            Name = "Liebestraum",
                            PreviewId = "44f268c1-3e94-4d05-8ccb-17c2e77b538d",
                            ReleaseYear = 1850,
                            Type = 0
                        },
                        new
                        {
                            Id = "1e97c905-b865-4592-932a-4d5b3c627ed3",
                            AuthorId = "050c7a4c-5c24-42c4-b13d-387799596d6f",
                            Name = "Lettre à ma mère",
                            PreviewId = "5a9ba216-9883-471d-9c0f-4c3d37e4ec34",
                            ReleaseYear = 1979,
                            Type = 0
                        },
                        new
                        {
                            Id = "e1bc65d8-2d67-41c5-ab87-f15efa687d29",
                            AuthorId = "95e20169-19ab-4ecd-ad0e-25d80028852c",
                            Name = "Requiem",
                            PreviewId = "9d0a67df-6fb4-4fac-b670-49a5f590beb7",
                            ReleaseYear = 1791,
                            Type = 0
                        },
                        new
                        {
                            Id = "8227072d-d879-4755-aea1-5a9f5dd8881a",
                            AuthorId = "95e20169-19ab-4ecd-ad0e-25d80028852c",
                            Name = "The marriage of Figaro",
                            PreviewId = "15fa89e4-7777-4330-b32e-62172cd398c0",
                            ReleaseYear = 1786,
                            Type = 0
                        },
                        new
                        {
                            Id = "9c15ca9a-40ff-4e59-aae3-09f947f74f7f",
                            AuthorId = "9f78fe69-e03b-40e2-b8bd-24428bff14e3",
                            Name = "Violin Concerto No. 2",
                            PreviewId = "493afb2c-eb2a-4eab-9e4e-6585eb9924ae",
                            ReleaseYear = 1826,
                            Type = 0
                        },
                        new
                        {
                            Id = "0cd5cf91-7699-45ac-bf7f-808f24abb076",
                            AuthorId = "97d0e58e-e9a1-46d2-93a0-39a2f4517e7c",
                            Name = "Whenever you need somebody",
                            PreviewId = "572cc6a2-a5ba-47f5-8819-8330770cf8b5",
                            ReleaseYear = 1987,
                            Type = 0
                        },
                        new
                        {
                            Id = "e1d72bbc-b61f-41f6-af18-d719682fa428",
                            AuthorId = "a3a39902-91ba-4f18-b1ad-174a0abeb819",
                            Name = "Valse-Scherzo",
                            PreviewId = "36febf49-1c49-4b69-8084-73ebce69040a",
                            ReleaseYear = 1877,
                            Type = 0
                        },
                        new
                        {
                            Id = "9f2b9022-54f8-4baf-ba42-877a73a73961",
                            AuthorId = "95e20169-19ab-4ecd-ad0e-25d80028852c",
                            Name = "Piano Sonata No. 11",
                            PreviewId = "b26e8131-28bf-4ae9-842b-33b3d639b08e",
                            ReleaseYear = 1784,
                            Type = 0
                        },
                        new
                        {
                            Id = "cdace994-a952-4190-a520-c77b77be7bca",
                            AuthorId = "db88345d-d07e-4701-bd80-dee0f0ab2da9",
                            Name = "Hungarian Rhapsodies",
                            PreviewId = "0a8c3ca2-56ca-4534-a426-648854e61821",
                            ReleaseYear = 1885,
                            Type = 0
                        });
                });

            modelBuilder.Entity("Models.Entities.Author", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = "95e20169-19ab-4ecd-ad0e-25d80028852c",
                            Name = "Wolfgang Amadeus Mozart",
                            UserId = "9836aa61-f61f-4f53-9d81-fd11398a962f"
                        },
                        new
                        {
                            Id = "aabbbcbd-81c4-400b-94ce-22c28c5010a9",
                            Name = "Antonio Lucio Vivaldi",
                            UserId = "6aa10996-a41b-4ae2-84e4-cb682c353aaa"
                        },
                        new
                        {
                            Id = "98c18ea1-1470-489b-90a9-0c3a7104ad19",
                            Name = "Ludwig van Beethoven",
                            UserId = "614b3f26-c84f-4ba5-8209-e1fe2a3d2c95"
                        },
                        new
                        {
                            Id = "f7a377de-06df-4328-8660-540de961010c",
                            Name = "Dmitri Shostakovich",
                            UserId = "c5dd5c01-8bc0-441c-ab5c-9ce175430558"
                        },
                        new
                        {
                            Id = "9edece38-8e1d-4a05-a4a3-8ced7f913100",
                            Name = "Frédéric Chopin",
                            UserId = "0d808c08-d40a-4a5c-9449-f4454494f5f3"
                        },
                        new
                        {
                            Id = "13e94b58-46d9-4dd2-b3ab-5e69cd0d66b8",
                            Name = "Nikolai Rimsky-Korsakov",
                            UserId = "6547fbbb-8c5b-4ced-9c94-55783a785887"
                        },
                        new
                        {
                            Id = "db88345d-d07e-4701-bd80-dee0f0ab2da9",
                            Name = "Franz Liszt",
                            UserId = "59649289-fbad-4895-a46a-dbc05fdde565"
                        },
                        new
                        {
                            Id = "050c7a4c-5c24-42c4-b13d-387799596d6f",
                            Name = "Paul de Senneville",
                            UserId = "5da5079f-9ab9-47bf-ba32-7cb60c085fbf"
                        },
                        new
                        {
                            Id = "9f78fe69-e03b-40e2-b8bd-24428bff14e3",
                            Name = "Niccolò Paganini",
                            UserId = "ccf573c7-5090-4a70-b509-b15f4b50e2df"
                        },
                        new
                        {
                            Id = "97d0e58e-e9a1-46d2-93a0-39a2f4517e7c",
                            Name = "Rick Astley",
                            UserId = "d15f062a-b4a6-4e76-9767-d67c3313d5d3"
                        },
                        new
                        {
                            Id = "a3a39902-91ba-4f18-b1ad-174a0abeb819",
                            Name = "Pyotr Tchaikovsky",
                            UserId = "e9b1e578-72a6-4942-b459-bec8e9a0189e"
                        });
                });

            modelBuilder.Entity("Models.Entities.Genre", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = "7e4b4524-0514-4c80-bb6e-3c07c03bbf76",
                            Name = "Classic"
                        },
                        new
                        {
                            Id = "5adb6826-1452-454f-af12-c030eb18c978",
                            Name = "Instrumental"
                        },
                        new
                        {
                            Id = "304121dd-cfa2-4e74-bac9-adc5c83f03a6",
                            Name = "Jazz"
                        },
                        new
                        {
                            Id = "a12d49f1-58d3-46ed-9995-a5aa2f31b5eb",
                            Name = "New Age"
                        },
                        new
                        {
                            Id = "e4fe0b0d-56cb-428b-bc88-155e92664a31",
                            Name = "Pop"
                        });
                });

            modelBuilder.Entity("Models.Entities.Joints.GenreTrack", b =>
                {
                    b.Property<string>("GenreId")
                        .HasColumnType("text");

                    b.Property<string>("TrackId")
                        .HasColumnType("text");

                    b.HasKey("GenreId", "TrackId");

                    b.HasIndex("TrackId");

                    b.ToTable("GenreTrack");

                    b.HasData(
                        new
                        {
                            GenreId = "7e4b4524-0514-4c80-bb6e-3c07c03bbf76",
                            TrackId = "eaebfb1e-dc1c-4c30-9acf-a2124790b422"
                        },
                        new
                        {
                            GenreId = "5adb6826-1452-454f-af12-c030eb18c978",
                            TrackId = "eaebfb1e-dc1c-4c30-9acf-a2124790b422"
                        },
                        new
                        {
                            GenreId = "7e4b4524-0514-4c80-bb6e-3c07c03bbf76",
                            TrackId = "01dec976-5a96-44cc-98d6-0fb96c0d4172"
                        },
                        new
                        {
                            GenreId = "5adb6826-1452-454f-af12-c030eb18c978",
                            TrackId = "01dec976-5a96-44cc-98d6-0fb96c0d4172"
                        },
                        new
                        {
                            GenreId = "7e4b4524-0514-4c80-bb6e-3c07c03bbf76",
                            TrackId = "55b94c05-65cb-42c2-b67c-5876a6b6ed48"
                        },
                        new
                        {
                            GenreId = "5adb6826-1452-454f-af12-c030eb18c978",
                            TrackId = "55b94c05-65cb-42c2-b67c-5876a6b6ed48"
                        },
                        new
                        {
                            GenreId = "7e4b4524-0514-4c80-bb6e-3c07c03bbf76",
                            TrackId = "e98f5c49-32c4-4943-876b-5d360fd9a1e5"
                        },
                        new
                        {
                            GenreId = "304121dd-cfa2-4e74-bac9-adc5c83f03a6",
                            TrackId = "e98f5c49-32c4-4943-876b-5d360fd9a1e5"
                        },
                        new
                        {
                            GenreId = "7e4b4524-0514-4c80-bb6e-3c07c03bbf76",
                            TrackId = "868f5429-36af-4d4c-a0f3-321283864b34"
                        },
                        new
                        {
                            GenreId = "5adb6826-1452-454f-af12-c030eb18c978",
                            TrackId = "868f5429-36af-4d4c-a0f3-321283864b34"
                        },
                        new
                        {
                            GenreId = "7e4b4524-0514-4c80-bb6e-3c07c03bbf76",
                            TrackId = "2185956f-cd1b-4891-9f3b-82a818be8962"
                        },
                        new
                        {
                            GenreId = "5adb6826-1452-454f-af12-c030eb18c978",
                            TrackId = "2185956f-cd1b-4891-9f3b-82a818be8962"
                        },
                        new
                        {
                            GenreId = "7e4b4524-0514-4c80-bb6e-3c07c03bbf76",
                            TrackId = "e138d221-050f-40bc-b8d8-8a7f5961eb86"
                        },
                        new
                        {
                            GenreId = "5adb6826-1452-454f-af12-c030eb18c978",
                            TrackId = "e138d221-050f-40bc-b8d8-8a7f5961eb86"
                        },
                        new
                        {
                            GenreId = "7e4b4524-0514-4c80-bb6e-3c07c03bbf76",
                            TrackId = "9e004990-ec0f-4117-8bda-7343b5a5896d"
                        },
                        new
                        {
                            GenreId = "5adb6826-1452-454f-af12-c030eb18c978",
                            TrackId = "9e004990-ec0f-4117-8bda-7343b5a5896d"
                        },
                        new
                        {
                            GenreId = "7e4b4524-0514-4c80-bb6e-3c07c03bbf76",
                            TrackId = "a0df6545-7c52-45b1-a439-4b4ea8428aee"
                        },
                        new
                        {
                            GenreId = "5adb6826-1452-454f-af12-c030eb18c978",
                            TrackId = "a0df6545-7c52-45b1-a439-4b4ea8428aee"
                        },
                        new
                        {
                            GenreId = "a12d49f1-58d3-46ed-9995-a5aa2f31b5eb",
                            TrackId = "69de43c6-876c-4c70-bedf-f0efcc978efa"
                        },
                        new
                        {
                            GenreId = "5adb6826-1452-454f-af12-c030eb18c978",
                            TrackId = "69de43c6-876c-4c70-bedf-f0efcc978efa"
                        },
                        new
                        {
                            GenreId = "7e4b4524-0514-4c80-bb6e-3c07c03bbf76",
                            TrackId = "e0f4d900-50b8-4952-882a-ada94466a96f"
                        },
                        new
                        {
                            GenreId = "7e4b4524-0514-4c80-bb6e-3c07c03bbf76",
                            TrackId = "0823c8ce-8c46-49ad-930f-434637f66987"
                        },
                        new
                        {
                            GenreId = "5adb6826-1452-454f-af12-c030eb18c978",
                            TrackId = "0823c8ce-8c46-49ad-930f-434637f66987"
                        },
                        new
                        {
                            GenreId = "e4fe0b0d-56cb-428b-bc88-155e92664a31",
                            TrackId = "211612d4-b5da-48e2-aa18-60e36a829fda"
                        },
                        new
                        {
                            GenreId = "7e4b4524-0514-4c80-bb6e-3c07c03bbf76",
                            TrackId = "b0a6131b-febd-4b19-b9f0-ae80fbb1c176"
                        },
                        new
                        {
                            GenreId = "5adb6826-1452-454f-af12-c030eb18c978",
                            TrackId = "b0a6131b-febd-4b19-b9f0-ae80fbb1c176"
                        },
                        new
                        {
                            GenreId = "7e4b4524-0514-4c80-bb6e-3c07c03bbf76",
                            TrackId = "21944a9f-3faf-4c13-841e-ef963886ac38"
                        },
                        new
                        {
                            GenreId = "5adb6826-1452-454f-af12-c030eb18c978",
                            TrackId = "21944a9f-3faf-4c13-841e-ef963886ac38"
                        },
                        new
                        {
                            GenreId = "7e4b4524-0514-4c80-bb6e-3c07c03bbf76",
                            TrackId = "16a383aa-bbe2-4b3a-8f2d-422882e285ee"
                        },
                        new
                        {
                            GenreId = "5adb6826-1452-454f-af12-c030eb18c978",
                            TrackId = "16a383aa-bbe2-4b3a-8f2d-422882e285ee"
                        });
                });

            modelBuilder.Entity("Models.Entities.Playlist", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OwnerId")
                        .HasColumnType("text");

                    b.Property<string>("PreviewId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("Models.Entities.Track", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AlbumId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            Id = "eaebfb1e-dc1c-4c30-9acf-a2124790b422",
                            AlbumId = "17409b22-0079-4b29-b79b-d5e99718e249",
                            FileId = "7c561b1e-3070-4e83-b71a-2fd7a69fa040",
                            Name = "Summer - Storm"
                        },
                        new
                        {
                            Id = "01dec976-5a96-44cc-98d6-0fb96c0d4172",
                            AlbumId = "17409b22-0079-4b29-b79b-d5e99718e249",
                            FileId = "9f1d7cfd-53c6-478f-82e2-db737d1b9ecf",
                            Name = "Spring"
                        },
                        new
                        {
                            Id = "55b94c05-65cb-42c2-b67c-5876a6b6ed48",
                            AlbumId = "a184871f-858c-4c9a-b8cf-99c314373c21",
                            FileId = "e6a51aae-2ee3-4253-8b9c-1e88e65f0efb",
                            Name = "Moonlight Sonata"
                        },
                        new
                        {
                            Id = "e98f5c49-32c4-4943-876b-5d360fd9a1e5",
                            AlbumId = "db762ffd-8186-44ce-99b7-61ce6c41759c",
                            FileId = "29ad8ca9-c791-4482-8a44-15776862b282",
                            Name = "Waltz No. 2"
                        },
                        new
                        {
                            Id = "868f5429-36af-4d4c-a0f3-321283864b34",
                            AlbumId = "d638c3e6-a394-4f9b-aa74-5c3e1af30c03",
                            FileId = "4180556e-5365-4b9c-aa72-a47241346855",
                            Name = "Fantaisie Impromptu"
                        },
                        new
                        {
                            Id = "2185956f-cd1b-4891-9f3b-82a818be8962",
                            AlbumId = "1c7577da-ae0d-47c5-9709-e40b479b6561",
                            FileId = "4180556e-5365-4b9c-aa72-a47241346855",
                            Name = "Flight of the Bumblebee"
                        },
                        new
                        {
                            Id = "e138d221-050f-40bc-b8d8-8a7f5961eb86",
                            AlbumId = "32896a09-b2eb-45a4-9c3e-ef4ed45a424b",
                            FileId = "864239f6-65c5-440f-8326-213b3b25693f",
                            Name = "La Campanella"
                        },
                        new
                        {
                            Id = "a0df6545-7c52-45b1-a439-4b4ea8428aee",
                            AlbumId = "483ce399-4688-41e2-8a09-075a638769c7",
                            FileId = "44f268c1-3e94-4d05-8ccb-17c2e77b538d",
                            Name = "Love Dream"
                        },
                        new
                        {
                            Id = "69de43c6-876c-4c70-bedf-f0efcc978efa",
                            AlbumId = "1e97c905-b865-4592-932a-4d5b3c627ed3",
                            FileId = "15fa89e4-7777-4330-b32e-62172cd398c0",
                            Name = "Marriage d'Amour"
                        },
                        new
                        {
                            Id = "e0f4d900-50b8-4952-882a-ada94466a96f",
                            AlbumId = "e1bc65d8-2d67-41c5-ab87-f15efa687d29",
                            FileId = "9d0a67df-6fb4-4fac-b670-49a5f590beb7",
                            Name = "Lacrimosa"
                        },
                        new
                        {
                            Id = "0823c8ce-8c46-49ad-930f-434637f66987",
                            AlbumId = "8227072d-d879-4755-aea1-5a9f5dd8881a",
                            FileId = "15fa89e4-7777-4330-b32e-62172cd398c0",
                            Name = "Marriage of Figaro - Overture"
                        },
                        new
                        {
                            Id = "9e004990-ec0f-4117-8bda-7343b5a5896d",
                            AlbumId = "9c15ca9a-40ff-4e59-aae3-09f947f74f7f",
                            FileId = "493afb2c-eb2a-4eab-9e4e-6585eb9924ae",
                            Name = "La Campanella"
                        },
                        new
                        {
                            Id = "211612d4-b5da-48e2-aa18-60e36a829fda",
                            AlbumId = "0cd5cf91-7699-45ac-bf7f-808f24abb076",
                            FileId = "572cc6a2-a5ba-47f5-8819-8330770cf8b5",
                            Name = "Never gonna give you up"
                        },
                        new
                        {
                            Id = "b0a6131b-febd-4b19-b9f0-ae80fbb1c176",
                            AlbumId = "e1d72bbc-b61f-41f6-af18-d719682fa428",
                            FileId = "36febf49-1c49-4b69-8084-73ebce69040a",
                            Name = "Valse Sentimental"
                        },
                        new
                        {
                            Id = "21944a9f-3faf-4c13-841e-ef963886ac38",
                            AlbumId = "9f2b9022-54f8-4baf-ba42-877a73a73961",
                            FileId = "b26e8131-28bf-4ae9-842b-33b3d639b08e",
                            Name = "Turkish March"
                        },
                        new
                        {
                            Id = "16a383aa-bbe2-4b3a-8f2d-422882e285ee",
                            AlbumId = "cdace994-a952-4190-a520-c77b77be7bca",
                            FileId = "2d47fb0d-971c-44e5-9d76-8b5589f0cbbb",
                            Name = "Hungarian Rhapsody No. 2"
                        });
                });

            modelBuilder.Entity("Models.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("UserName", "Email")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "9836aa61-f61f-4f53-9d81-fd11398a962f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "69513caf-2537-469d-b176-a4a612fe8280",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Wolfgang Amadeus Mozart",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "bc9bff83-bc9c-4580-96e4-7b676cbd0da9",
                            TwoFactorEnabled = false,
                            UserName = "mozart"
                        },
                        new
                        {
                            Id = "6aa10996-a41b-4ae2-84e4-cb682c353aaa",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "814e4ca6-c059-4859-93d5-9d1ef805e1e7",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Antonio Lucio Vivaldi",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "9924df6a-ba87-49bc-adc4-79252c9caf8e",
                            TwoFactorEnabled = false,
                            UserName = "vivaldi"
                        },
                        new
                        {
                            Id = "614b3f26-c84f-4ba5-8209-e1fe2a3d2c95",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "90a2f955-6011-457f-be20-18b30e8e597d",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Ludwig van Beethoven",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "4e44284e-a863-486e-b45e-2639affb17d4",
                            TwoFactorEnabled = false,
                            UserName = "beethoven"
                        },
                        new
                        {
                            Id = "c5dd5c01-8bc0-441c-ab5c-9ce175430558",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "08d2e096-6003-405e-85e7-f0f8965a15eb",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Dmitri Shostakovich",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "bb636ce0-b98f-471e-ae3b-22f525d5ce3c",
                            TwoFactorEnabled = false,
                            UserName = "shostakovich"
                        },
                        new
                        {
                            Id = "0d808c08-d40a-4a5c-9449-f4454494f5f3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a050608c-a917-4cf7-b3e3-b22fdd17116c",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Frédéric Chopin",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "24c3f965-d839-4f2e-848c-33a2839363fe",
                            TwoFactorEnabled = false,
                            UserName = "chopin"
                        },
                        new
                        {
                            Id = "6547fbbb-8c5b-4ced-9c94-55783a785887",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c646efc1-b33c-477c-9563-be5447e4a02f",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Nikolai Rimsky-Korsakov",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "30be22c1-36e9-421c-b6a1-c04e2b6e4b42",
                            TwoFactorEnabled = false,
                            UserName = "rimsky-korsakov"
                        },
                        new
                        {
                            Id = "59649289-fbad-4895-a46a-dbc05fdde565",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "61ba8229-b4f6-4b4f-bcbf-796f11cd9a41",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Franz Liszt",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "8074c86b-ccdb-4fd6-8f8b-58a34f4bf16e",
                            TwoFactorEnabled = false,
                            UserName = "liszt"
                        },
                        new
                        {
                            Id = "5da5079f-9ab9-47bf-ba32-7cb60c085fbf",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a589202e-a87f-4fa2-8ea0-3f6fe16abf29",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Paul de Senneville",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "9775441b-e420-4803-997c-1491b2a54593",
                            TwoFactorEnabled = false,
                            UserName = "senneville"
                        },
                        new
                        {
                            Id = "ccf573c7-5090-4a70-b509-b15f4b50e2df",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3b03e9d6-67d7-4caf-acaf-b236cbe7888c",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Niccolò Paganini",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "ff97071a-f233-4134-861c-438f91ebad17",
                            TwoFactorEnabled = false,
                            UserName = "paganini"
                        },
                        new
                        {
                            Id = "d15f062a-b4a6-4e76-9767-d67c3313d5d3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "21b61ba7-3328-4359-8147-8a2e2f01c437",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Rick Astley",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "356e4a6d-76ae-4dee-a00b-7e78663341d9",
                            TwoFactorEnabled = false,
                            UserName = "astley"
                        },
                        new
                        {
                            Id = "e9b1e578-72a6-4942-b459-bec8e9a0189e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cc4f4cdd-10b8-4061-adac-0bfd596abf6c",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Pyotr Tchaikovsky",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "760abf63-df4b-4316-9f25-64e13dbe22d4",
                            TwoFactorEnabled = false,
                            UserName = "tchaikovsky"
                        });
                });

            modelBuilder.Entity("PlaylistTrack", b =>
                {
                    b.Property<string>("InPlaylistsId")
                        .HasColumnType("text");

                    b.Property<string>("TracksId")
                        .HasColumnType("text");

                    b.HasKey("InPlaylistsId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("PlaylistTrack");
                });

            modelBuilder.Entity("TrackUser", b =>
                {
                    b.Property<string>("HistoryId")
                        .HasColumnType("text");

                    b.Property<string>("HistoryId1")
                        .HasColumnType("text");

                    b.HasKey("HistoryId", "HistoryId1");

                    b.HasIndex("HistoryId1");

                    b.ToTable("TrackUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Entities.Album", b =>
                {
                    b.HasOne("Models.Entities.Author", "Author")
                        .WithMany("Albums")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Models.Entities.Author", b =>
                {
                    b.HasOne("Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Entities.Joints.GenreTrack", b =>
                {
                    b.HasOne("Models.Entities.Genre", "Genre")
                        .WithMany("GenreTracks")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.Track", "Track")
                        .WithMany("GenreTracks")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("Models.Entities.Playlist", b =>
                {
                    b.HasOne("Models.Entities.User", "Owner")
                        .WithMany("Playlists")
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Models.Entities.Track", b =>
                {
                    b.HasOne("Models.Entities.Album", "Album")
                        .WithMany("Tracks")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");
                });

            modelBuilder.Entity("PlaylistTrack", b =>
                {
                    b.HasOne("Models.Entities.Playlist", null)
                        .WithMany()
                        .HasForeignKey("InPlaylistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TrackUser", b =>
                {
                    b.HasOne("Models.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("HistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("HistoryId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Entities.Album", b =>
                {
                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("Models.Entities.Author", b =>
                {
                    b.Navigation("Albums");
                });

            modelBuilder.Entity("Models.Entities.Genre", b =>
                {
                    b.Navigation("GenreTracks");
                });

            modelBuilder.Entity("Models.Entities.Track", b =>
                {
                    b.Navigation("GenreTracks");
                });

            modelBuilder.Entity("Models.Entities.User", b =>
                {
                    b.Navigation("Playlists");
                });
#pragma warning restore 612, 618
        }
    }
}
