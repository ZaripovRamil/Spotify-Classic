// <auto-generated />
using System;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Database.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230412131612_ChangedEmailAgain")]
    partial class ChangedEmailAgain
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GenreTrack", b =>
                {
                    b.Property<string>("GenresId")
                        .HasColumnType("text");

                    b.Property<string>("TracksId")
                        .HasColumnType("text");

                    b.HasKey("GenresId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("GenreTrack");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Models.Entities.Album", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PreviewId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Albums");

                    b.HasData(
                        new
                        {
                            Id = "9263e9f4-1949-42e6-b805-d4b5da445c84",
                            AuthorId = "7d912fa8-9124-4200-be12-4df303afa6de",
                            Name = "The Four Seasons",
                            PreviewId = "7c561b1e-3070-4e83-b71a-2fd7a69fa040",
                            ReleaseYear = 1725,
                            Type = 0
                        },
                        new
                        {
                            Id = "bfbbdc08-1b2e-4931-94c1-a4d63183ba73",
                            AuthorId = "3a2b8ebc-ab4b-4b96-864c-75e007b7ef7d",
                            Name = "Moonlight Sonata",
                            PreviewId = "e6a51aae-2ee3-4253-8b9c-1e88e65f0efb",
                            ReleaseYear = 1802,
                            Type = 1
                        },
                        new
                        {
                            Id = "f59dba60-7834-450c-8683-23c0cb9489f1",
                            AuthorId = "a8108ac5-094f-46c8-905d-2e2ff500184c",
                            Name = "Waltz No. 2",
                            PreviewId = "29ad8ca9-c791-4482-8a44-15776862b282",
                            ReleaseYear = 1938,
                            Type = 1
                        },
                        new
                        {
                            Id = "7aedcc25-471f-48a6-b6f2-16236e5a747c",
                            AuthorId = "4fda97b7-0388-41a5-bb2e-d35071768e43",
                            Name = "Fantaisie-Impromptu",
                            PreviewId = "4180556e-5365-4b9c-aa72-a47241346855",
                            ReleaseYear = 1834,
                            Type = 1
                        },
                        new
                        {
                            Id = "cce2ab42-5359-4623-a454-8414e6da9c4a",
                            AuthorId = "62984273-d8d2-4c82-a137-9d532044af4c",
                            Name = "The Tale of Tsar Saltan",
                            PreviewId = "cdbc9b43-ee1b-4a64-8b2d-d579522ea84f",
                            ReleaseYear = 1900,
                            Type = 0
                        },
                        new
                        {
                            Id = "9a24cbf0-48b7-472a-944a-dd9b77ca8ea9",
                            AuthorId = "cb1f955e-5c52-4819-8f1c-7db37beb246a",
                            Name = "Grandes études de Paganini",
                            PreviewId = "864239f6-65c5-440f-8326-213b3b25693f",
                            ReleaseYear = 1851,
                            Type = 0
                        },
                        new
                        {
                            Id = "50744713-e72c-4511-b9dd-c86b421be9e2",
                            AuthorId = "cb1f955e-5c52-4819-8f1c-7db37beb246a",
                            Name = "Liebestraum",
                            PreviewId = "44f268c1-3e94-4d05-8ccb-17c2e77b538d",
                            ReleaseYear = 1850,
                            Type = 0
                        },
                        new
                        {
                            Id = "8cc58b47-eb12-45b3-a8a9-f8408299160b",
                            AuthorId = "71f6794c-ffe7-45d2-ad1b-0d289fbb7178",
                            Name = "Lettre à ma mère",
                            PreviewId = "5a9ba216-9883-471d-9c0f-4c3d37e4ec34",
                            ReleaseYear = 1979,
                            Type = 0
                        },
                        new
                        {
                            Id = "1beb18cb-442c-482e-aad5-226a7c78ca35",
                            AuthorId = "397f6b08-cb1e-48c4-a0ab-6cf5ecab159c",
                            Name = "Requiem",
                            PreviewId = "9d0a67df-6fb4-4fac-b670-49a5f590beb7",
                            ReleaseYear = 1791,
                            Type = 0
                        },
                        new
                        {
                            Id = "c6881cf2-830c-4108-80f1-098df2e8fe7f",
                            AuthorId = "397f6b08-cb1e-48c4-a0ab-6cf5ecab159c",
                            Name = "The marriage of Figaro",
                            PreviewId = "15fa89e4-7777-4330-b32e-62172cd398c0",
                            ReleaseYear = 1786,
                            Type = 0
                        },
                        new
                        {
                            Id = "ae5da170-2f1e-4954-bf36-77510fd03e00",
                            AuthorId = "05eb4e6b-d0df-41bf-bfa6-4456a69048e8",
                            Name = "Violin Concerto No. 2",
                            PreviewId = "493afb2c-eb2a-4eab-9e4e-6585eb9924ae",
                            ReleaseYear = 1826,
                            Type = 0
                        },
                        new
                        {
                            Id = "307e5d2d-28c3-407a-b3c2-adf6ac4f749b",
                            AuthorId = "efbe3c8f-a898-4c20-9510-7c0a1aceba0e",
                            Name = "Whenever you need somebody",
                            PreviewId = "572cc6a2-a5ba-47f5-8819-8330770cf8b5",
                            ReleaseYear = 1987,
                            Type = 0
                        },
                        new
                        {
                            Id = "2d059957-f392-43ed-87d1-4705e26a8936",
                            AuthorId = "88d01fa8-da8c-4edc-bf38-f83dbee33102",
                            Name = "Valse-Scherzo",
                            PreviewId = "36febf49-1c49-4b69-8084-73ebce69040a",
                            ReleaseYear = 1877,
                            Type = 0
                        },
                        new
                        {
                            Id = "db9d14cd-a42b-4603-88c0-e1be2aeb6a7a",
                            AuthorId = "397f6b08-cb1e-48c4-a0ab-6cf5ecab159c",
                            Name = "Piano Sonata No. 11",
                            PreviewId = "b26e8131-28bf-4ae9-842b-33b3d639b08e",
                            ReleaseYear = 1784,
                            Type = 0
                        },
                        new
                        {
                            Id = "d26a31ad-293c-4e04-9b7d-3d609e70043a",
                            AuthorId = "cb1f955e-5c52-4819-8f1c-7db37beb246a",
                            Name = "Hungarian Rhapsodies",
                            PreviewId = "0a8c3ca2-56ca-4534-a426-648854e61821",
                            ReleaseYear = 1885,
                            Type = 0
                        });
                });

            modelBuilder.Entity("Models.Entities.Author", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = "397f6b08-cb1e-48c4-a0ab-6cf5ecab159c",
                            Name = "John Doe",
                            UserId = "7da8b7c1-175d-4fb4-bf5e-5886e5fc8e3f"
                        },
                        new
                        {
                            Id = "7d912fa8-9124-4200-be12-4df303afa6de",
                            Name = "John Doe",
                            UserId = "7da8b7c1-175d-4fb4-bf5e-5886e5fc8e3f"
                        },
                        new
                        {
                            Id = "3a2b8ebc-ab4b-4b96-864c-75e007b7ef7d",
                            Name = "John Doe",
                            UserId = "7da8b7c1-175d-4fb4-bf5e-5886e5fc8e3f"
                        },
                        new
                        {
                            Id = "a8108ac5-094f-46c8-905d-2e2ff500184c",
                            Name = "John Doe",
                            UserId = "7da8b7c1-175d-4fb4-bf5e-5886e5fc8e3f"
                        },
                        new
                        {
                            Id = "4fda97b7-0388-41a5-bb2e-d35071768e43",
                            Name = "John Doe",
                            UserId = "7da8b7c1-175d-4fb4-bf5e-5886e5fc8e3f"
                        },
                        new
                        {
                            Id = "62984273-d8d2-4c82-a137-9d532044af4c",
                            Name = "John Doe",
                            UserId = "7da8b7c1-175d-4fb4-bf5e-5886e5fc8e3f"
                        },
                        new
                        {
                            Id = "cb1f955e-5c52-4819-8f1c-7db37beb246a",
                            Name = "John Doe",
                            UserId = "7da8b7c1-175d-4fb4-bf5e-5886e5fc8e3f"
                        },
                        new
                        {
                            Id = "71f6794c-ffe7-45d2-ad1b-0d289fbb7178",
                            Name = "John Doe",
                            UserId = "7da8b7c1-175d-4fb4-bf5e-5886e5fc8e3f"
                        },
                        new
                        {
                            Id = "05eb4e6b-d0df-41bf-bfa6-4456a69048e8",
                            Name = "John Doe",
                            UserId = "7da8b7c1-175d-4fb4-bf5e-5886e5fc8e3f"
                        },
                        new
                        {
                            Id = "efbe3c8f-a898-4c20-9510-7c0a1aceba0e",
                            Name = "John Doe",
                            UserId = "7da8b7c1-175d-4fb4-bf5e-5886e5fc8e3f"
                        },
                        new
                        {
                            Id = "88d01fa8-da8c-4edc-bf38-f83dbee33102",
                            Name = "John Doe",
                            UserId = "7da8b7c1-175d-4fb4-bf5e-5886e5fc8e3f"
                        });
                });

            modelBuilder.Entity("Models.Entities.Genre", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = "a0b124e5-055c-43a4-80f7-7f773a3b0a2a",
                            Name = "Classic"
                        },
                        new
                        {
                            Id = "ad153fd0-dd2c-43a1-b6d2-327f99536750",
                            Name = "Instrumental"
                        },
                        new
                        {
                            Id = "72811315-294c-42b0-bd40-1eed587d97ad",
                            Name = "Jazz"
                        },
                        new
                        {
                            Id = "238c45f5-c2a7-4317-882f-7b07fca05790",
                            Name = "New Age"
                        },
                        new
                        {
                            Id = "a2832e5c-6da3-444a-97d8-ff899a304fd2",
                            Name = "Pop"
                        });
                });

            modelBuilder.Entity("Models.Entities.Playlist", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OwnerId")
                        .HasColumnType("text");

                    b.Property<string>("PreviewId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("Models.Entities.Track", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AlbumId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            Id = "f0345d2c-5008-4287-96b4-1a334d3bb5a2",
                            AlbumId = "9263e9f4-1949-42e6-b805-d4b5da445c84",
                            FileId = "7c561b1e-3070-4e83-b71a-2fd7a69fa040",
                            Name = "Summer - Storm"
                        },
                        new
                        {
                            Id = "599e575c-4236-4fd4-8860-4ead50d09a69",
                            AlbumId = "9263e9f4-1949-42e6-b805-d4b5da445c84",
                            FileId = "9f1d7cfd-53c6-478f-82e2-db737d1b9ecf",
                            Name = "Spring"
                        },
                        new
                        {
                            Id = "4ac50eb6-dd9f-4ad2-bdb4-8504c6c77728",
                            AlbumId = "bfbbdc08-1b2e-4931-94c1-a4d63183ba73",
                            FileId = "e6a51aae-2ee3-4253-8b9c-1e88e65f0efb",
                            Name = "Moonlight Sonata"
                        },
                        new
                        {
                            Id = "3f021a7a-59c3-4a6f-b40c-2a7a36fd7bc5",
                            AlbumId = "f59dba60-7834-450c-8683-23c0cb9489f1",
                            FileId = "29ad8ca9-c791-4482-8a44-15776862b282",
                            Name = "Waltz No. 2"
                        },
                        new
                        {
                            Id = "eb775cc6-5798-421b-9081-ab54bb24cfc4",
                            AlbumId = "7aedcc25-471f-48a6-b6f2-16236e5a747c",
                            FileId = "4180556e-5365-4b9c-aa72-a47241346855",
                            Name = "Fantaisie Impromptu"
                        },
                        new
                        {
                            Id = "8bac0058-8da2-4278-bf98-3adddff28914",
                            AlbumId = "cce2ab42-5359-4623-a454-8414e6da9c4a",
                            FileId = "cdbc9b43-ee1b-4a64-8b2d-d579522ea84f",
                            Name = "Flight of the Bumblebee"
                        },
                        new
                        {
                            Id = "cb68239b-c1ce-41b5-801f-d4d275bf6356",
                            AlbumId = "9a24cbf0-48b7-472a-944a-dd9b77ca8ea9",
                            FileId = "864239f6-65c5-440f-8326-213b3b25693f",
                            Name = "La Campanella"
                        },
                        new
                        {
                            Id = "3a073972-cbed-48d0-9c96-3996288293df",
                            AlbumId = "50744713-e72c-4511-b9dd-c86b421be9e2",
                            FileId = "44f268c1-3e94-4d05-8ccb-17c2e77b538d",
                            Name = "Love Dream"
                        },
                        new
                        {
                            Id = "e8446f18-d1f4-424f-86d9-a6974929e6f9",
                            AlbumId = "8cc58b47-eb12-45b3-a8a9-f8408299160b",
                            FileId = "5a9ba216-9883-471d-9c0f-4c3d37e4ec34",
                            Name = "Marriage d'Amour"
                        },
                        new
                        {
                            Id = "853bcdf0-c731-4844-8344-f5623e8d6f15",
                            AlbumId = "1beb18cb-442c-482e-aad5-226a7c78ca35",
                            FileId = "9d0a67df-6fb4-4fac-b670-49a5f590beb7",
                            Name = "Lacrimosa"
                        },
                        new
                        {
                            Id = "9f71550b-31bb-4078-835b-24fa2e60cb63",
                            AlbumId = "c6881cf2-830c-4108-80f1-098df2e8fe7f",
                            FileId = "15fa89e4-7777-4330-b32e-62172cd398c0",
                            Name = "Marriage of Figaro - Overture"
                        },
                        new
                        {
                            Id = "37f89c6a-4b0e-49e5-8a7f-65b27f521fe9",
                            AlbumId = "ae5da170-2f1e-4954-bf36-77510fd03e00",
                            FileId = "493afb2c-eb2a-4eab-9e4e-6585eb9924ae",
                            Name = "La Campanella"
                        },
                        new
                        {
                            Id = "3b67f3bc-7968-490f-8b04-9722d3a48460",
                            AlbumId = "307e5d2d-28c3-407a-b3c2-adf6ac4f749b",
                            FileId = "572cc6a2-a5ba-47f5-8819-8330770cf8b5",
                            Name = "Never gonna give you up"
                        },
                        new
                        {
                            Id = "0ce909ba-a79d-4ee2-9c8c-e3790a9b795a",
                            AlbumId = "2d059957-f392-43ed-87d1-4705e26a8936",
                            FileId = "36febf49-1c49-4b69-8084-73ebce69040a",
                            Name = "Valse Sentimental"
                        },
                        new
                        {
                            Id = "53d43842-ac99-4d46-b8b6-1953f1b23d28",
                            AlbumId = "db9d14cd-a42b-4603-88c0-e1be2aeb6a7a",
                            FileId = "b26e8131-28bf-4ae9-842b-33b3d639b08e",
                            Name = "Turkish March"
                        },
                        new
                        {
                            Id = "0317764d-0cb6-4421-aab4-00bdb3bedc1a",
                            AlbumId = "d26a31ad-293c-4e04-9b7d-3d609e70043a",
                            FileId = "2d47fb0d-971c-44e5-9d76-8b5589f0cbbb",
                            Name = "Hungarian Rhapsody No. 2"
                        });
                });

            modelBuilder.Entity("Models.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("ProfilePicId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("UserName", "Email")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "7da8b7c1-175d-4fb4-bf5e-5886e5fc8e3f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9bf03597-3336-4d3f-8b2f-ec0e9e3759fa",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "John Doe",
                            PhoneNumberConfirmed = false,
                            ProfilePicId = "default_pfp",
                            Role = 0,
                            SecurityStamp = "b80e8eec-ef35-4ee1-a619-0caef685f161",
                            TwoFactorEnabled = false,
                            UserName = "defaultUser"
                        });
                });

            modelBuilder.Entity("PlaylistTrack", b =>
                {
                    b.Property<string>("InPlaylistsId")
                        .HasColumnType("text");

                    b.Property<string>("TracksId")
                        .HasColumnType("text");

                    b.HasKey("InPlaylistsId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("PlaylistTrack");
                });

            modelBuilder.Entity("TrackUser", b =>
                {
                    b.Property<string>("HistoryId")
                        .HasColumnType("text");

                    b.Property<string>("HistoryId1")
                        .HasColumnType("text");

                    b.HasKey("HistoryId", "HistoryId1");

                    b.HasIndex("HistoryId1");

                    b.ToTable("TrackUser");
                });

            modelBuilder.Entity("GenreTrack", b =>
                {
                    b.HasOne("Models.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Entities.Album", b =>
                {
                    b.HasOne("Models.Entities.Author", "Author")
                        .WithMany("Albums")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Models.Entities.Author", b =>
                {
                    b.HasOne("Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Entities.Playlist", b =>
                {
                    b.HasOne("Models.Entities.User", "Owner")
                        .WithMany("Playlists")
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Models.Entities.Track", b =>
                {
                    b.HasOne("Models.Entities.Album", "Album")
                        .WithMany("Tracks")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");
                });

            modelBuilder.Entity("PlaylistTrack", b =>
                {
                    b.HasOne("Models.Entities.Playlist", null)
                        .WithMany()
                        .HasForeignKey("InPlaylistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TrackUser", b =>
                {
                    b.HasOne("Models.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("HistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("HistoryId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Entities.Album", b =>
                {
                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("Models.Entities.Author", b =>
                {
                    b.Navigation("Albums");
                });

            modelBuilder.Entity("Models.Entities.User", b =>
                {
                    b.Navigation("Playlists");
                });
#pragma warning restore 612, 618
        }
    }
}
