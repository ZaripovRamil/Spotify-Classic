// <auto-generated />
using System;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Database.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230412132939_anotherAttempt")]
    partial class anotherAttempt
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GenreTrack", b =>
                {
                    b.Property<string>("GenresId")
                        .HasColumnType("text");

                    b.Property<string>("TracksId")
                        .HasColumnType("text");

                    b.HasKey("GenresId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("GenreTrack");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Models.Entities.Album", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PreviewId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Albums");

                    b.HasData(
                        new
                        {
                            Id = "3a42fcfb-3001-48b0-8d5b-971febef1174",
                            AuthorId = "90bcc597-84d5-4394-9ec3-a6f784d3bb41",
                            Name = "The Four Seasons",
                            PreviewId = "7c561b1e-3070-4e83-b71a-2fd7a69fa040",
                            ReleaseYear = 1725,
                            Type = 0
                        },
                        new
                        {
                            Id = "749586d8-8a8b-4942-915a-88b99e2f440c",
                            AuthorId = "f40d08ba-45c5-4cd1-a2ac-c6f84cbbb580",
                            Name = "Moonlight Sonata",
                            PreviewId = "e6a51aae-2ee3-4253-8b9c-1e88e65f0efb",
                            ReleaseYear = 1802,
                            Type = 1
                        },
                        new
                        {
                            Id = "1fd39e17-85bb-43a3-83bd-a04413915b40",
                            AuthorId = "b4c48fbd-0abd-4798-81e0-c00857b21588",
                            Name = "Waltz No. 2",
                            PreviewId = "29ad8ca9-c791-4482-8a44-15776862b282",
                            ReleaseYear = 1938,
                            Type = 1
                        },
                        new
                        {
                            Id = "0b28ab66-3bfe-42cb-8a75-1e50b2337b24",
                            AuthorId = "908aaab3-b72e-430d-86d4-31fa05630d9e",
                            Name = "Fantaisie-Impromptu",
                            PreviewId = "4180556e-5365-4b9c-aa72-a47241346855",
                            ReleaseYear = 1834,
                            Type = 1
                        },
                        new
                        {
                            Id = "6f5336ad-c267-43f4-b57f-481c41a2364e",
                            AuthorId = "47820772-2268-4cd5-8f2a-957e593abba0",
                            Name = "The Tale of Tsar Saltan",
                            PreviewId = "cdbc9b43-ee1b-4a64-8b2d-d579522ea84f",
                            ReleaseYear = 1900,
                            Type = 0
                        },
                        new
                        {
                            Id = "29aba55c-c872-4520-8af6-dcca4fa193eb",
                            AuthorId = "997bdc97-4ba1-4037-82a1-1a4f4a1d0271",
                            Name = "Grandes études de Paganini",
                            PreviewId = "864239f6-65c5-440f-8326-213b3b25693f",
                            ReleaseYear = 1851,
                            Type = 0
                        },
                        new
                        {
                            Id = "24732606-de07-4898-9471-b78576fa6fc5",
                            AuthorId = "997bdc97-4ba1-4037-82a1-1a4f4a1d0271",
                            Name = "Liebestraum",
                            PreviewId = "44f268c1-3e94-4d05-8ccb-17c2e77b538d",
                            ReleaseYear = 1850,
                            Type = 0
                        },
                        new
                        {
                            Id = "2f105c9b-65ec-40ee-9587-c2f14c8ffcb3",
                            AuthorId = "d8c2f629-a4f7-4d1f-ba49-3ec8c623d11a",
                            Name = "Lettre à ma mère",
                            PreviewId = "5a9ba216-9883-471d-9c0f-4c3d37e4ec34",
                            ReleaseYear = 1979,
                            Type = 0
                        },
                        new
                        {
                            Id = "183e5bba-1d69-4a41-b159-121b5de14b74",
                            AuthorId = "95813fba-349d-4348-a75c-7d3c0172d5b6",
                            Name = "Requiem",
                            PreviewId = "9d0a67df-6fb4-4fac-b670-49a5f590beb7",
                            ReleaseYear = 1791,
                            Type = 0
                        },
                        new
                        {
                            Id = "2b4c9aa9-b330-4e4c-a124-1a9ea9969696",
                            AuthorId = "95813fba-349d-4348-a75c-7d3c0172d5b6",
                            Name = "The marriage of Figaro",
                            PreviewId = "15fa89e4-7777-4330-b32e-62172cd398c0",
                            ReleaseYear = 1786,
                            Type = 0
                        },
                        new
                        {
                            Id = "6fd48595-219d-43e6-9a01-2e1d4871079b",
                            AuthorId = "9f6bb67d-c336-4305-9bfc-d727518690b5",
                            Name = "Violin Concerto No. 2",
                            PreviewId = "493afb2c-eb2a-4eab-9e4e-6585eb9924ae",
                            ReleaseYear = 1826,
                            Type = 0
                        },
                        new
                        {
                            Id = "ef02a48c-acfc-4588-921a-2ccfb0d0f6eb",
                            AuthorId = "f63407d0-aba8-4981-969d-3a543fca6fee",
                            Name = "Whenever you need somebody",
                            PreviewId = "572cc6a2-a5ba-47f5-8819-8330770cf8b5",
                            ReleaseYear = 1987,
                            Type = 0
                        },
                        new
                        {
                            Id = "2bd6b720-a292-43d6-8a9e-54ef17d71343",
                            AuthorId = "230392c1-8d9c-4481-88b9-75525ee50312",
                            Name = "Valse-Scherzo",
                            PreviewId = "36febf49-1c49-4b69-8084-73ebce69040a",
                            ReleaseYear = 1877,
                            Type = 0
                        },
                        new
                        {
                            Id = "a8bc41a9-eb98-4068-b202-a69c6ea3b1c2",
                            AuthorId = "95813fba-349d-4348-a75c-7d3c0172d5b6",
                            Name = "Piano Sonata No. 11",
                            PreviewId = "b26e8131-28bf-4ae9-842b-33b3d639b08e",
                            ReleaseYear = 1784,
                            Type = 0
                        },
                        new
                        {
                            Id = "415d76fe-8224-486f-a23e-72bdf703e701",
                            AuthorId = "997bdc97-4ba1-4037-82a1-1a4f4a1d0271",
                            Name = "Hungarian Rhapsodies",
                            PreviewId = "0a8c3ca2-56ca-4534-a426-648854e61821",
                            ReleaseYear = 1885,
                            Type = 0
                        });
                });

            modelBuilder.Entity("Models.Entities.Author", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = "95813fba-349d-4348-a75c-7d3c0172d5b6",
                            Name = "John Doe",
                            UserId = "2950d014-0250-4d63-8416-f6db77ed7193"
                        },
                        new
                        {
                            Id = "90bcc597-84d5-4394-9ec3-a6f784d3bb41",
                            Name = "John Doe",
                            UserId = "2950d014-0250-4d63-8416-f6db77ed7193"
                        },
                        new
                        {
                            Id = "f40d08ba-45c5-4cd1-a2ac-c6f84cbbb580",
                            Name = "John Doe",
                            UserId = "2950d014-0250-4d63-8416-f6db77ed7193"
                        },
                        new
                        {
                            Id = "b4c48fbd-0abd-4798-81e0-c00857b21588",
                            Name = "John Doe",
                            UserId = "2950d014-0250-4d63-8416-f6db77ed7193"
                        },
                        new
                        {
                            Id = "908aaab3-b72e-430d-86d4-31fa05630d9e",
                            Name = "John Doe",
                            UserId = "2950d014-0250-4d63-8416-f6db77ed7193"
                        },
                        new
                        {
                            Id = "47820772-2268-4cd5-8f2a-957e593abba0",
                            Name = "John Doe",
                            UserId = "2950d014-0250-4d63-8416-f6db77ed7193"
                        },
                        new
                        {
                            Id = "997bdc97-4ba1-4037-82a1-1a4f4a1d0271",
                            Name = "John Doe",
                            UserId = "2950d014-0250-4d63-8416-f6db77ed7193"
                        },
                        new
                        {
                            Id = "d8c2f629-a4f7-4d1f-ba49-3ec8c623d11a",
                            Name = "John Doe",
                            UserId = "2950d014-0250-4d63-8416-f6db77ed7193"
                        },
                        new
                        {
                            Id = "9f6bb67d-c336-4305-9bfc-d727518690b5",
                            Name = "John Doe",
                            UserId = "2950d014-0250-4d63-8416-f6db77ed7193"
                        },
                        new
                        {
                            Id = "f63407d0-aba8-4981-969d-3a543fca6fee",
                            Name = "John Doe",
                            UserId = "2950d014-0250-4d63-8416-f6db77ed7193"
                        },
                        new
                        {
                            Id = "230392c1-8d9c-4481-88b9-75525ee50312",
                            Name = "John Doe",
                            UserId = "2950d014-0250-4d63-8416-f6db77ed7193"
                        });
                });

            modelBuilder.Entity("Models.Entities.Genre", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = "c3c98a05-0168-474d-af75-0fd1a5384115",
                            Name = "Classic"
                        },
                        new
                        {
                            Id = "7e0a10a8-6877-43eb-8e03-80bfdb6b4439",
                            Name = "Instrumental"
                        },
                        new
                        {
                            Id = "5b2e930f-6dde-468f-a68c-824276066c03",
                            Name = "Jazz"
                        },
                        new
                        {
                            Id = "8c2fe1fa-d37c-416c-8f41-1d0163333e49",
                            Name = "New Age"
                        },
                        new
                        {
                            Id = "786b6cca-cf45-4e3a-8a74-466b34ce1006",
                            Name = "Pop"
                        });
                });

            modelBuilder.Entity("Models.Entities.Playlist", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OwnerId")
                        .HasColumnType("text");

                    b.Property<string>("PreviewId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("Models.Entities.Track", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AlbumId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            Id = "a9a3450c-6a14-46cd-8f77-29bfac3aaa46",
                            AlbumId = "3a42fcfb-3001-48b0-8d5b-971febef1174",
                            FileId = "7c561b1e-3070-4e83-b71a-2fd7a69fa040",
                            Name = "Summer - Storm"
                        },
                        new
                        {
                            Id = "d9e23ce2-eb03-48e8-b95e-1fb199edc336",
                            AlbumId = "3a42fcfb-3001-48b0-8d5b-971febef1174",
                            FileId = "9f1d7cfd-53c6-478f-82e2-db737d1b9ecf",
                            Name = "Spring"
                        },
                        new
                        {
                            Id = "54b5e651-e42f-4389-b0b9-48f7190414ea",
                            AlbumId = "749586d8-8a8b-4942-915a-88b99e2f440c",
                            FileId = "e6a51aae-2ee3-4253-8b9c-1e88e65f0efb",
                            Name = "Moonlight Sonata"
                        },
                        new
                        {
                            Id = "49d39e02-f00d-4c24-a6c3-cd01d740406a",
                            AlbumId = "1fd39e17-85bb-43a3-83bd-a04413915b40",
                            FileId = "29ad8ca9-c791-4482-8a44-15776862b282",
                            Name = "Waltz No. 2"
                        },
                        new
                        {
                            Id = "719d1edd-8bbf-40a7-b368-ce89836fd6ee",
                            AlbumId = "0b28ab66-3bfe-42cb-8a75-1e50b2337b24",
                            FileId = "4180556e-5365-4b9c-aa72-a47241346855",
                            Name = "Fantaisie Impromptu"
                        },
                        new
                        {
                            Id = "b655bd34-44fa-4c2d-8265-bc1db1587155",
                            AlbumId = "6f5336ad-c267-43f4-b57f-481c41a2364e",
                            FileId = "cdbc9b43-ee1b-4a64-8b2d-d579522ea84f",
                            Name = "Flight of the Bumblebee"
                        },
                        new
                        {
                            Id = "8ae59dcf-80d2-4d3b-8f3a-32c7aed50c94",
                            AlbumId = "29aba55c-c872-4520-8af6-dcca4fa193eb",
                            FileId = "864239f6-65c5-440f-8326-213b3b25693f",
                            Name = "La Campanella"
                        },
                        new
                        {
                            Id = "ea9bba10-86eb-484a-8c63-03bedb67aa00",
                            AlbumId = "24732606-de07-4898-9471-b78576fa6fc5",
                            FileId = "44f268c1-3e94-4d05-8ccb-17c2e77b538d",
                            Name = "Love Dream"
                        },
                        new
                        {
                            Id = "06541810-0736-4ad5-8318-bd684ad36010",
                            AlbumId = "2f105c9b-65ec-40ee-9587-c2f14c8ffcb3",
                            FileId = "5a9ba216-9883-471d-9c0f-4c3d37e4ec34",
                            Name = "Marriage d'Amour"
                        },
                        new
                        {
                            Id = "095b7608-75eb-476d-b179-ab5b1613d876",
                            AlbumId = "183e5bba-1d69-4a41-b159-121b5de14b74",
                            FileId = "9d0a67df-6fb4-4fac-b670-49a5f590beb7",
                            Name = "Lacrimosa"
                        },
                        new
                        {
                            Id = "92a7ba3f-f152-4c2a-8183-a6834db2c092",
                            AlbumId = "2b4c9aa9-b330-4e4c-a124-1a9ea9969696",
                            FileId = "15fa89e4-7777-4330-b32e-62172cd398c0",
                            Name = "Marriage of Figaro - Overture"
                        },
                        new
                        {
                            Id = "a038d2ad-b0eb-4759-aa60-a5c0a827c12e",
                            AlbumId = "6fd48595-219d-43e6-9a01-2e1d4871079b",
                            FileId = "493afb2c-eb2a-4eab-9e4e-6585eb9924ae",
                            Name = "La Campanella"
                        },
                        new
                        {
                            Id = "14296bf4-f6ae-4fd9-ae30-961fef50677e",
                            AlbumId = "ef02a48c-acfc-4588-921a-2ccfb0d0f6eb",
                            FileId = "572cc6a2-a5ba-47f5-8819-8330770cf8b5",
                            Name = "Never gonna give you up"
                        },
                        new
                        {
                            Id = "ccd200c8-7f12-4bfe-9e1b-9a2126632df2",
                            AlbumId = "2bd6b720-a292-43d6-8a9e-54ef17d71343",
                            FileId = "36febf49-1c49-4b69-8084-73ebce69040a",
                            Name = "Valse Sentimental"
                        },
                        new
                        {
                            Id = "fca8865f-e8dd-4cb4-929b-879da7a57c35",
                            AlbumId = "a8bc41a9-eb98-4068-b202-a69c6ea3b1c2",
                            FileId = "b26e8131-28bf-4ae9-842b-33b3d639b08e",
                            Name = "Turkish March"
                        },
                        new
                        {
                            Id = "4e3f9830-66fb-466c-9812-1f5c64322cfe",
                            AlbumId = "415d76fe-8224-486f-a23e-72bdf703e701",
                            FileId = "2d47fb0d-971c-44e5-9d76-8b5589f0cbbb",
                            Name = "Hungarian Rhapsody No. 2"
                        });
                });

            modelBuilder.Entity("Models.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("ProfilePicId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("UserName", "Email")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2950d014-0250-4d63-8416-f6db77ed7193",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "84b058ef-d110-471d-97e4-9a116cb17874",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "John Doe",
                            PhoneNumberConfirmed = false,
                            ProfilePicId = "default_pfp",
                            Role = 0,
                            SecurityStamp = "7e5e95ee-9a44-47b3-a8af-47e34bd663c8",
                            TwoFactorEnabled = false,
                            UserName = "defaultUser"
                        });
                });

            modelBuilder.Entity("PlaylistTrack", b =>
                {
                    b.Property<string>("InPlaylistsId")
                        .HasColumnType("text");

                    b.Property<string>("TracksId")
                        .HasColumnType("text");

                    b.HasKey("InPlaylistsId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("PlaylistTrack");
                });

            modelBuilder.Entity("TrackUser", b =>
                {
                    b.Property<string>("HistoryId")
                        .HasColumnType("text");

                    b.Property<string>("HistoryId1")
                        .HasColumnType("text");

                    b.HasKey("HistoryId", "HistoryId1");

                    b.HasIndex("HistoryId1");

                    b.ToTable("TrackUser");
                });

            modelBuilder.Entity("GenreTrack", b =>
                {
                    b.HasOne("Models.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Entities.Album", b =>
                {
                    b.HasOne("Models.Entities.Author", "Author")
                        .WithMany("Albums")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Models.Entities.Author", b =>
                {
                    b.HasOne("Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Entities.Playlist", b =>
                {
                    b.HasOne("Models.Entities.User", "Owner")
                        .WithMany("Playlists")
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Models.Entities.Track", b =>
                {
                    b.HasOne("Models.Entities.Album", "Album")
                        .WithMany("Tracks")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");
                });

            modelBuilder.Entity("PlaylistTrack", b =>
                {
                    b.HasOne("Models.Entities.Playlist", null)
                        .WithMany()
                        .HasForeignKey("InPlaylistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TrackUser", b =>
                {
                    b.HasOne("Models.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("HistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("HistoryId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Entities.Album", b =>
                {
                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("Models.Entities.Author", b =>
                {
                    b.Navigation("Albums");
                });

            modelBuilder.Entity("Models.Entities.User", b =>
                {
                    b.Navigation("Playlists");
                });
#pragma warning restore 612, 618
        }
    }
}
