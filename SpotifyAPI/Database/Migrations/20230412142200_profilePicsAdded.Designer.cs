// <auto-generated />
using System;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Database.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230412142200_profilePicsAdded")]
    partial class profilePicsAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Models.Entities.Album", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PreviewId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Albums");

                    b.HasData(
                        new
                        {
                            Id = "9e4e4346-f9ca-4d33-ae5c-d6f7d9467301",
                            AuthorId = "191a45d2-5f4a-4b2b-9816-1b14a506072e",
                            Name = "The Four Seasons",
                            PreviewId = "7c561b1e-3070-4e83-b71a-2fd7a69fa040",
                            ReleaseYear = 1725,
                            Type = 0
                        },
                        new
                        {
                            Id = "059ed910-1764-40d4-8536-cd01b9bbcdd9",
                            AuthorId = "1c8ee002-63c6-4dfe-8c58-c92df3e5d67e",
                            Name = "Moonlight Sonata",
                            PreviewId = "e6a51aae-2ee3-4253-8b9c-1e88e65f0efb",
                            ReleaseYear = 1802,
                            Type = 1
                        },
                        new
                        {
                            Id = "ce80f674-430c-47fc-aabb-b7929a2e3cc0",
                            AuthorId = "0067ae0e-06a5-4036-b13f-a07682bf3a04",
                            Name = "Waltz No. 2",
                            PreviewId = "29ad8ca9-c791-4482-8a44-15776862b282",
                            ReleaseYear = 1938,
                            Type = 1
                        },
                        new
                        {
                            Id = "bbda1520-5eb0-49d8-98c7-2b9387600de2",
                            AuthorId = "61693545-84f0-41ce-b3d8-7562fe4de8f7",
                            Name = "Fantaisie-Impromptu",
                            PreviewId = "4180556e-5365-4b9c-aa72-a47241346855",
                            ReleaseYear = 1834,
                            Type = 1
                        },
                        new
                        {
                            Id = "37b62582-a8f5-411c-952b-e0bd12dea75d",
                            AuthorId = "48f02063-882a-4e4a-af54-22eaada1adfd",
                            Name = "The Tale of Tsar Saltan",
                            PreviewId = "cdbc9b43-ee1b-4a64-8b2d-d579522ea84f",
                            ReleaseYear = 1900,
                            Type = 0
                        },
                        new
                        {
                            Id = "8a6237dc-6cb0-4e50-b12a-34fc151f0443",
                            AuthorId = "d87434a7-8b30-419a-84f3-dbd1836450cc",
                            Name = "Grandes études de Paganini",
                            PreviewId = "864239f6-65c5-440f-8326-213b3b25693f",
                            ReleaseYear = 1851,
                            Type = 0
                        },
                        new
                        {
                            Id = "2ce80427-9778-4488-bcba-33c26a4dcb1b",
                            AuthorId = "d87434a7-8b30-419a-84f3-dbd1836450cc",
                            Name = "Liebestraum",
                            PreviewId = "44f268c1-3e94-4d05-8ccb-17c2e77b538d",
                            ReleaseYear = 1850,
                            Type = 0
                        },
                        new
                        {
                            Id = "fe0889ec-318f-4636-9c6d-5881fa65bc4b",
                            AuthorId = "d1528e38-8bfa-4ee1-90ed-45c06ad5f4c5",
                            Name = "Lettre à ma mère",
                            PreviewId = "5a9ba216-9883-471d-9c0f-4c3d37e4ec34",
                            ReleaseYear = 1979,
                            Type = 0
                        },
                        new
                        {
                            Id = "04d3f296-d52d-4df4-8875-5a4e33a85120",
                            AuthorId = "c7018b20-0748-424d-9fcd-7b0c23ff50ac",
                            Name = "Requiem",
                            PreviewId = "9d0a67df-6fb4-4fac-b670-49a5f590beb7",
                            ReleaseYear = 1791,
                            Type = 0
                        },
                        new
                        {
                            Id = "a8deb544-c6c9-41f5-a079-102eb80da678",
                            AuthorId = "c7018b20-0748-424d-9fcd-7b0c23ff50ac",
                            Name = "The marriage of Figaro",
                            PreviewId = "15fa89e4-7777-4330-b32e-62172cd398c0",
                            ReleaseYear = 1786,
                            Type = 0
                        },
                        new
                        {
                            Id = "e96988d4-3ab3-4e15-88d4-7f64834d4ba0",
                            AuthorId = "6b8ac9e7-e518-437f-9880-70e9007cf281",
                            Name = "Violin Concerto No. 2",
                            PreviewId = "493afb2c-eb2a-4eab-9e4e-6585eb9924ae",
                            ReleaseYear = 1826,
                            Type = 0
                        },
                        new
                        {
                            Id = "e2493a17-9faf-494f-9392-68004084b141",
                            AuthorId = "d01efc76-b603-4307-a7e7-be4b81e37c4f",
                            Name = "Whenever you need somebody",
                            PreviewId = "572cc6a2-a5ba-47f5-8819-8330770cf8b5",
                            ReleaseYear = 1987,
                            Type = 0
                        },
                        new
                        {
                            Id = "7a70fc4a-eb8d-4288-aab3-63a71e811d96",
                            AuthorId = "bfac7890-8a82-4faf-85ff-451b2bc1d3ad",
                            Name = "Valse-Scherzo",
                            PreviewId = "36febf49-1c49-4b69-8084-73ebce69040a",
                            ReleaseYear = 1877,
                            Type = 0
                        },
                        new
                        {
                            Id = "b522f0c5-ef57-44c4-b05e-7072f9b36323",
                            AuthorId = "c7018b20-0748-424d-9fcd-7b0c23ff50ac",
                            Name = "Piano Sonata No. 11",
                            PreviewId = "b26e8131-28bf-4ae9-842b-33b3d639b08e",
                            ReleaseYear = 1784,
                            Type = 0
                        },
                        new
                        {
                            Id = "f989bf37-c91c-4a70-bff3-21a67573dbb9",
                            AuthorId = "d87434a7-8b30-419a-84f3-dbd1836450cc",
                            Name = "Hungarian Rhapsodies",
                            PreviewId = "0a8c3ca2-56ca-4534-a426-648854e61821",
                            ReleaseYear = 1885,
                            Type = 0
                        });
                });

            modelBuilder.Entity("Models.Entities.Author", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = "c7018b20-0748-424d-9fcd-7b0c23ff50ac",
                            Name = "John Doe",
                            UserId = "d37d9abf-6baa-41d7-80a5-8da1b6762503"
                        },
                        new
                        {
                            Id = "191a45d2-5f4a-4b2b-9816-1b14a506072e",
                            Name = "John Doe",
                            UserId = "d37d9abf-6baa-41d7-80a5-8da1b6762503"
                        },
                        new
                        {
                            Id = "1c8ee002-63c6-4dfe-8c58-c92df3e5d67e",
                            Name = "John Doe",
                            UserId = "d37d9abf-6baa-41d7-80a5-8da1b6762503"
                        },
                        new
                        {
                            Id = "0067ae0e-06a5-4036-b13f-a07682bf3a04",
                            Name = "John Doe",
                            UserId = "d37d9abf-6baa-41d7-80a5-8da1b6762503"
                        },
                        new
                        {
                            Id = "61693545-84f0-41ce-b3d8-7562fe4de8f7",
                            Name = "John Doe",
                            UserId = "d37d9abf-6baa-41d7-80a5-8da1b6762503"
                        },
                        new
                        {
                            Id = "48f02063-882a-4e4a-af54-22eaada1adfd",
                            Name = "John Doe",
                            UserId = "d37d9abf-6baa-41d7-80a5-8da1b6762503"
                        },
                        new
                        {
                            Id = "d87434a7-8b30-419a-84f3-dbd1836450cc",
                            Name = "John Doe",
                            UserId = "d37d9abf-6baa-41d7-80a5-8da1b6762503"
                        },
                        new
                        {
                            Id = "d1528e38-8bfa-4ee1-90ed-45c06ad5f4c5",
                            Name = "John Doe",
                            UserId = "d37d9abf-6baa-41d7-80a5-8da1b6762503"
                        },
                        new
                        {
                            Id = "6b8ac9e7-e518-437f-9880-70e9007cf281",
                            Name = "John Doe",
                            UserId = "d37d9abf-6baa-41d7-80a5-8da1b6762503"
                        },
                        new
                        {
                            Id = "d01efc76-b603-4307-a7e7-be4b81e37c4f",
                            Name = "John Doe",
                            UserId = "d37d9abf-6baa-41d7-80a5-8da1b6762503"
                        },
                        new
                        {
                            Id = "bfac7890-8a82-4faf-85ff-451b2bc1d3ad",
                            Name = "John Doe",
                            UserId = "d37d9abf-6baa-41d7-80a5-8da1b6762503"
                        });
                });

            modelBuilder.Entity("Models.Entities.Genre", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = "41274e7b-5940-4368-8f51-5ac9c2a35c36",
                            Name = "Classic"
                        },
                        new
                        {
                            Id = "814e198b-4d1b-4c0f-9396-da55fa052c02",
                            Name = "Instrumental"
                        },
                        new
                        {
                            Id = "a63b0ecb-2407-4fd8-8ccc-235529819aa0",
                            Name = "Jazz"
                        },
                        new
                        {
                            Id = "1d3e2467-a861-4f4e-abf6-9ababd4dd951",
                            Name = "New Age"
                        },
                        new
                        {
                            Id = "b88ca48c-2135-4e58-8b7c-b2e83b290f3d",
                            Name = "Pop"
                        });
                });

            modelBuilder.Entity("Models.Entities.Joints.GenreTrack", b =>
                {
                    b.Property<string>("GenreId")
                        .HasColumnType("text");

                    b.Property<string>("TrackId")
                        .HasColumnType("text");

                    b.HasKey("GenreId", "TrackId");

                    b.HasIndex("TrackId");

                    b.ToTable("GenreTrack");

                    b.HasData(
                        new
                        {
                            GenreId = "41274e7b-5940-4368-8f51-5ac9c2a35c36",
                            TrackId = "d6a67528-63d4-4d9f-84c2-a6fc20ab3453"
                        },
                        new
                        {
                            GenreId = "814e198b-4d1b-4c0f-9396-da55fa052c02",
                            TrackId = "d6a67528-63d4-4d9f-84c2-a6fc20ab3453"
                        },
                        new
                        {
                            GenreId = "41274e7b-5940-4368-8f51-5ac9c2a35c36",
                            TrackId = "a0b2a925-1a13-4e5a-ab64-002986975e46"
                        },
                        new
                        {
                            GenreId = "814e198b-4d1b-4c0f-9396-da55fa052c02",
                            TrackId = "a0b2a925-1a13-4e5a-ab64-002986975e46"
                        },
                        new
                        {
                            GenreId = "41274e7b-5940-4368-8f51-5ac9c2a35c36",
                            TrackId = "7c3b74d3-9092-46db-914a-33ec6cb0ac8f"
                        },
                        new
                        {
                            GenreId = "814e198b-4d1b-4c0f-9396-da55fa052c02",
                            TrackId = "7c3b74d3-9092-46db-914a-33ec6cb0ac8f"
                        },
                        new
                        {
                            GenreId = "41274e7b-5940-4368-8f51-5ac9c2a35c36",
                            TrackId = "089b84f9-06e5-4cfe-bd48-6f89cbb46cbe"
                        },
                        new
                        {
                            GenreId = "a63b0ecb-2407-4fd8-8ccc-235529819aa0",
                            TrackId = "089b84f9-06e5-4cfe-bd48-6f89cbb46cbe"
                        },
                        new
                        {
                            GenreId = "41274e7b-5940-4368-8f51-5ac9c2a35c36",
                            TrackId = "3505cd3d-7faf-4d49-99e8-22a0d2a5f879"
                        },
                        new
                        {
                            GenreId = "814e198b-4d1b-4c0f-9396-da55fa052c02",
                            TrackId = "3505cd3d-7faf-4d49-99e8-22a0d2a5f879"
                        },
                        new
                        {
                            GenreId = "41274e7b-5940-4368-8f51-5ac9c2a35c36",
                            TrackId = "2a5396f3-6a6a-4161-8f64-82a568538fcc"
                        },
                        new
                        {
                            GenreId = "814e198b-4d1b-4c0f-9396-da55fa052c02",
                            TrackId = "2a5396f3-6a6a-4161-8f64-82a568538fcc"
                        },
                        new
                        {
                            GenreId = "41274e7b-5940-4368-8f51-5ac9c2a35c36",
                            TrackId = "73f1d33e-29dd-49a4-b56d-acb28db29d83"
                        },
                        new
                        {
                            GenreId = "814e198b-4d1b-4c0f-9396-da55fa052c02",
                            TrackId = "73f1d33e-29dd-49a4-b56d-acb28db29d83"
                        },
                        new
                        {
                            GenreId = "41274e7b-5940-4368-8f51-5ac9c2a35c36",
                            TrackId = "44efe64a-21de-487f-b1f5-f011128857a1"
                        },
                        new
                        {
                            GenreId = "814e198b-4d1b-4c0f-9396-da55fa052c02",
                            TrackId = "44efe64a-21de-487f-b1f5-f011128857a1"
                        },
                        new
                        {
                            GenreId = "41274e7b-5940-4368-8f51-5ac9c2a35c36",
                            TrackId = "5f364585-7df5-4f72-8f1b-da8811f8ecd0"
                        },
                        new
                        {
                            GenreId = "814e198b-4d1b-4c0f-9396-da55fa052c02",
                            TrackId = "5f364585-7df5-4f72-8f1b-da8811f8ecd0"
                        },
                        new
                        {
                            GenreId = "1d3e2467-a861-4f4e-abf6-9ababd4dd951",
                            TrackId = "0cc8d498-84e9-41d8-bb28-8d54b650cf9e"
                        },
                        new
                        {
                            GenreId = "814e198b-4d1b-4c0f-9396-da55fa052c02",
                            TrackId = "0cc8d498-84e9-41d8-bb28-8d54b650cf9e"
                        },
                        new
                        {
                            GenreId = "41274e7b-5940-4368-8f51-5ac9c2a35c36",
                            TrackId = "440b9281-7b71-4090-b0bb-69fb2acc665b"
                        },
                        new
                        {
                            GenreId = "41274e7b-5940-4368-8f51-5ac9c2a35c36",
                            TrackId = "868fc562-80f3-4f7a-be2c-cdd144bd6aa4"
                        },
                        new
                        {
                            GenreId = "814e198b-4d1b-4c0f-9396-da55fa052c02",
                            TrackId = "868fc562-80f3-4f7a-be2c-cdd144bd6aa4"
                        },
                        new
                        {
                            GenreId = "b88ca48c-2135-4e58-8b7c-b2e83b290f3d",
                            TrackId = "7d351573-204c-4942-9ded-930dff51621c"
                        },
                        new
                        {
                            GenreId = "41274e7b-5940-4368-8f51-5ac9c2a35c36",
                            TrackId = "97bce19c-1551-4ee0-a78e-b6e0f30dd7dc"
                        },
                        new
                        {
                            GenreId = "814e198b-4d1b-4c0f-9396-da55fa052c02",
                            TrackId = "97bce19c-1551-4ee0-a78e-b6e0f30dd7dc"
                        },
                        new
                        {
                            GenreId = "41274e7b-5940-4368-8f51-5ac9c2a35c36",
                            TrackId = "22c7eb55-819a-4f19-89a2-83288d3321dc"
                        },
                        new
                        {
                            GenreId = "814e198b-4d1b-4c0f-9396-da55fa052c02",
                            TrackId = "22c7eb55-819a-4f19-89a2-83288d3321dc"
                        },
                        new
                        {
                            GenreId = "41274e7b-5940-4368-8f51-5ac9c2a35c36",
                            TrackId = "54a7fb6a-0127-41b7-8f99-6bcb5bbbc194"
                        },
                        new
                        {
                            GenreId = "814e198b-4d1b-4c0f-9396-da55fa052c02",
                            TrackId = "54a7fb6a-0127-41b7-8f99-6bcb5bbbc194"
                        });
                });

            modelBuilder.Entity("Models.Entities.Playlist", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OwnerId")
                        .HasColumnType("text");

                    b.Property<string>("PreviewId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("Models.Entities.Track", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AlbumId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            Id = "d6a67528-63d4-4d9f-84c2-a6fc20ab3453",
                            AlbumId = "9e4e4346-f9ca-4d33-ae5c-d6f7d9467301",
                            FileId = "7c561b1e-3070-4e83-b71a-2fd7a69fa040",
                            Name = "Summer - Storm"
                        },
                        new
                        {
                            Id = "a0b2a925-1a13-4e5a-ab64-002986975e46",
                            AlbumId = "9e4e4346-f9ca-4d33-ae5c-d6f7d9467301",
                            FileId = "9f1d7cfd-53c6-478f-82e2-db737d1b9ecf",
                            Name = "Spring"
                        },
                        new
                        {
                            Id = "7c3b74d3-9092-46db-914a-33ec6cb0ac8f",
                            AlbumId = "059ed910-1764-40d4-8536-cd01b9bbcdd9",
                            FileId = "e6a51aae-2ee3-4253-8b9c-1e88e65f0efb",
                            Name = "Moonlight Sonata"
                        },
                        new
                        {
                            Id = "089b84f9-06e5-4cfe-bd48-6f89cbb46cbe",
                            AlbumId = "ce80f674-430c-47fc-aabb-b7929a2e3cc0",
                            FileId = "29ad8ca9-c791-4482-8a44-15776862b282",
                            Name = "Waltz No. 2"
                        },
                        new
                        {
                            Id = "3505cd3d-7faf-4d49-99e8-22a0d2a5f879",
                            AlbumId = "bbda1520-5eb0-49d8-98c7-2b9387600de2",
                            FileId = "4180556e-5365-4b9c-aa72-a47241346855",
                            Name = "Fantaisie Impromptu"
                        },
                        new
                        {
                            Id = "2a5396f3-6a6a-4161-8f64-82a568538fcc",
                            AlbumId = "37b62582-a8f5-411c-952b-e0bd12dea75d",
                            FileId = "cdbc9b43-ee1b-4a64-8b2d-d579522ea84f",
                            Name = "Flight of the Bumblebee"
                        },
                        new
                        {
                            Id = "73f1d33e-29dd-49a4-b56d-acb28db29d83",
                            AlbumId = "8a6237dc-6cb0-4e50-b12a-34fc151f0443",
                            FileId = "864239f6-65c5-440f-8326-213b3b25693f",
                            Name = "La Campanella"
                        },
                        new
                        {
                            Id = "5f364585-7df5-4f72-8f1b-da8811f8ecd0",
                            AlbumId = "2ce80427-9778-4488-bcba-33c26a4dcb1b",
                            FileId = "44f268c1-3e94-4d05-8ccb-17c2e77b538d",
                            Name = "Love Dream"
                        },
                        new
                        {
                            Id = "0cc8d498-84e9-41d8-bb28-8d54b650cf9e",
                            AlbumId = "fe0889ec-318f-4636-9c6d-5881fa65bc4b",
                            FileId = "5a9ba216-9883-471d-9c0f-4c3d37e4ec34",
                            Name = "Marriage d'Amour"
                        },
                        new
                        {
                            Id = "440b9281-7b71-4090-b0bb-69fb2acc665b",
                            AlbumId = "04d3f296-d52d-4df4-8875-5a4e33a85120",
                            FileId = "9d0a67df-6fb4-4fac-b670-49a5f590beb7",
                            Name = "Lacrimosa"
                        },
                        new
                        {
                            Id = "868fc562-80f3-4f7a-be2c-cdd144bd6aa4",
                            AlbumId = "a8deb544-c6c9-41f5-a079-102eb80da678",
                            FileId = "15fa89e4-7777-4330-b32e-62172cd398c0",
                            Name = "Marriage of Figaro - Overture"
                        },
                        new
                        {
                            Id = "44efe64a-21de-487f-b1f5-f011128857a1",
                            AlbumId = "e96988d4-3ab3-4e15-88d4-7f64834d4ba0",
                            FileId = "493afb2c-eb2a-4eab-9e4e-6585eb9924ae",
                            Name = "La Campanella"
                        },
                        new
                        {
                            Id = "7d351573-204c-4942-9ded-930dff51621c",
                            AlbumId = "e2493a17-9faf-494f-9392-68004084b141",
                            FileId = "572cc6a2-a5ba-47f5-8819-8330770cf8b5",
                            Name = "Never gonna give you up"
                        },
                        new
                        {
                            Id = "97bce19c-1551-4ee0-a78e-b6e0f30dd7dc",
                            AlbumId = "7a70fc4a-eb8d-4288-aab3-63a71e811d96",
                            FileId = "36febf49-1c49-4b69-8084-73ebce69040a",
                            Name = "Valse Sentimental"
                        },
                        new
                        {
                            Id = "22c7eb55-819a-4f19-89a2-83288d3321dc",
                            AlbumId = "b522f0c5-ef57-44c4-b05e-7072f9b36323",
                            FileId = "b26e8131-28bf-4ae9-842b-33b3d639b08e",
                            Name = "Turkish March"
                        },
                        new
                        {
                            Id = "54a7fb6a-0127-41b7-8f99-6bcb5bbbc194",
                            AlbumId = "f989bf37-c91c-4a70-bff3-21a67573dbb9",
                            FileId = "2d47fb0d-971c-44e5-9d76-8b5589f0cbbb",
                            Name = "Hungarian Rhapsody No. 2"
                        });
                });

            modelBuilder.Entity("Models.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("ProfilePicId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("UserName", "Email")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "d37d9abf-6baa-41d7-80a5-8da1b6762503",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "42ffb7a6-d9e5-4675-b465-28b77328e33c",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "John Doe",
                            PhoneNumberConfirmed = false,
                            ProfilePicId = "default_pfp",
                            Role = 0,
                            SecurityStamp = "027d0780-df4f-43eb-9d38-55f4f497e90a",
                            TwoFactorEnabled = false,
                            UserName = "defaultUser"
                        });
                });

            modelBuilder.Entity("PlaylistTrack", b =>
                {
                    b.Property<string>("InPlaylistsId")
                        .HasColumnType("text");

                    b.Property<string>("TracksId")
                        .HasColumnType("text");

                    b.HasKey("InPlaylistsId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("PlaylistTrack");
                });

            modelBuilder.Entity("TrackUser", b =>
                {
                    b.Property<string>("HistoryId")
                        .HasColumnType("text");

                    b.Property<string>("HistoryId1")
                        .HasColumnType("text");

                    b.HasKey("HistoryId", "HistoryId1");

                    b.HasIndex("HistoryId1");

                    b.ToTable("TrackUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Entities.Album", b =>
                {
                    b.HasOne("Models.Entities.Author", "Author")
                        .WithMany("Albums")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Models.Entities.Author", b =>
                {
                    b.HasOne("Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Entities.Joints.GenreTrack", b =>
                {
                    b.HasOne("Models.Entities.Genre", "Genre")
                        .WithMany("GenreTracks")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.Track", "Track")
                        .WithMany("GenreTracks")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("Models.Entities.Playlist", b =>
                {
                    b.HasOne("Models.Entities.User", "Owner")
                        .WithMany("Playlists")
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Models.Entities.Track", b =>
                {
                    b.HasOne("Models.Entities.Album", "Album")
                        .WithMany("Tracks")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");
                });

            modelBuilder.Entity("PlaylistTrack", b =>
                {
                    b.HasOne("Models.Entities.Playlist", null)
                        .WithMany()
                        .HasForeignKey("InPlaylistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TrackUser", b =>
                {
                    b.HasOne("Models.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("HistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("HistoryId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Entities.Album", b =>
                {
                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("Models.Entities.Author", b =>
                {
                    b.Navigation("Albums");
                });

            modelBuilder.Entity("Models.Entities.Genre", b =>
                {
                    b.Navigation("GenreTracks");
                });

            modelBuilder.Entity("Models.Entities.Track", b =>
                {
                    b.Navigation("GenreTracks");
                });

            modelBuilder.Entity("Models.Entities.User", b =>
                {
                    b.Navigation("Playlists");
                });
#pragma warning restore 612, 618
        }
    }
}
