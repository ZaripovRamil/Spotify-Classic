// <auto-generated />
using System;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Database.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230412142824_fixedAuthorNames")]
    partial class fixedAuthorNames
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Models.Entities.Album", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PreviewId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Albums");

                    b.HasData(
                        new
                        {
                            Id = "e0eaa331-b0d4-4e20-b926-314a82812681",
                            AuthorId = "0b740558-b53d-473a-b208-82a1f7d877b2",
                            Name = "The Four Seasons",
                            PreviewId = "7c561b1e-3070-4e83-b71a-2fd7a69fa040",
                            ReleaseYear = 1725,
                            Type = 0
                        },
                        new
                        {
                            Id = "d737f1d5-a9db-488a-95e8-aa05ed56e50a",
                            AuthorId = "173607a4-66b5-4577-8175-c675e3af1dff",
                            Name = "Moonlight Sonata",
                            PreviewId = "e6a51aae-2ee3-4253-8b9c-1e88e65f0efb",
                            ReleaseYear = 1802,
                            Type = 1
                        },
                        new
                        {
                            Id = "66e74437-33e5-4efe-b8e5-8457230a7e2a",
                            AuthorId = "afaf80e6-2e83-495d-90c1-12b2ed796a5b",
                            Name = "Waltz No. 2",
                            PreviewId = "29ad8ca9-c791-4482-8a44-15776862b282",
                            ReleaseYear = 1938,
                            Type = 1
                        },
                        new
                        {
                            Id = "2ef6d9f7-25d6-459c-8b7e-ee23160dd880",
                            AuthorId = "40c7464c-0571-4fa7-a6f1-cf99ec6997b3",
                            Name = "Fantaisie-Impromptu",
                            PreviewId = "4180556e-5365-4b9c-aa72-a47241346855",
                            ReleaseYear = 1834,
                            Type = 1
                        },
                        new
                        {
                            Id = "846ec490-0631-49d4-bf73-84bab5cef0ab",
                            AuthorId = "3c0d26e3-bcc0-48c0-a34b-fa94aa8479f6",
                            Name = "The Tale of Tsar Saltan",
                            PreviewId = "cdbc9b43-ee1b-4a64-8b2d-d579522ea84f",
                            ReleaseYear = 1900,
                            Type = 0
                        },
                        new
                        {
                            Id = "d9f227dc-99cc-4aca-9640-7ebaf0181977",
                            AuthorId = "2c3ff652-d285-46c0-aeeb-6d31ae5baf02",
                            Name = "Grandes études de Paganini",
                            PreviewId = "864239f6-65c5-440f-8326-213b3b25693f",
                            ReleaseYear = 1851,
                            Type = 0
                        },
                        new
                        {
                            Id = "059b9866-0612-4dba-bef5-07ae7929ed51",
                            AuthorId = "2c3ff652-d285-46c0-aeeb-6d31ae5baf02",
                            Name = "Liebestraum",
                            PreviewId = "44f268c1-3e94-4d05-8ccb-17c2e77b538d",
                            ReleaseYear = 1850,
                            Type = 0
                        },
                        new
                        {
                            Id = "c3c887a1-de77-4765-ac12-d6fd418ac17a",
                            AuthorId = "4f444d53-f049-4755-a5f4-c3f724043e9c",
                            Name = "Lettre à ma mère",
                            PreviewId = "5a9ba216-9883-471d-9c0f-4c3d37e4ec34",
                            ReleaseYear = 1979,
                            Type = 0
                        },
                        new
                        {
                            Id = "fbc761cb-80d1-4a55-9bb3-1335d049e38b",
                            AuthorId = "63f735bf-6c4e-4c06-b457-5ac0d6440729",
                            Name = "Requiem",
                            PreviewId = "9d0a67df-6fb4-4fac-b670-49a5f590beb7",
                            ReleaseYear = 1791,
                            Type = 0
                        },
                        new
                        {
                            Id = "d782ebd6-a658-44e6-9111-ecc301ad8f5d",
                            AuthorId = "63f735bf-6c4e-4c06-b457-5ac0d6440729",
                            Name = "The marriage of Figaro",
                            PreviewId = "15fa89e4-7777-4330-b32e-62172cd398c0",
                            ReleaseYear = 1786,
                            Type = 0
                        },
                        new
                        {
                            Id = "757de1e3-db47-4f47-a3c8-a9ad291e6238",
                            AuthorId = "9fcde770-75d7-4856-bbfc-1d86a16303fd",
                            Name = "Violin Concerto No. 2",
                            PreviewId = "493afb2c-eb2a-4eab-9e4e-6585eb9924ae",
                            ReleaseYear = 1826,
                            Type = 0
                        },
                        new
                        {
                            Id = "682201dc-b229-4d9f-885c-d7bf2f8e5853",
                            AuthorId = "3847a090-65dc-4a2c-afdf-f7a4d75853fc",
                            Name = "Whenever you need somebody",
                            PreviewId = "572cc6a2-a5ba-47f5-8819-8330770cf8b5",
                            ReleaseYear = 1987,
                            Type = 0
                        },
                        new
                        {
                            Id = "c67b6adc-ea5f-4523-bfc5-d221e4c61016",
                            AuthorId = "04d8e7ba-8177-4db8-81da-8fd4cc98dd40",
                            Name = "Valse-Scherzo",
                            PreviewId = "36febf49-1c49-4b69-8084-73ebce69040a",
                            ReleaseYear = 1877,
                            Type = 0
                        },
                        new
                        {
                            Id = "284cb826-90c0-4ce2-b6ef-b656e192b602",
                            AuthorId = "63f735bf-6c4e-4c06-b457-5ac0d6440729",
                            Name = "Piano Sonata No. 11",
                            PreviewId = "b26e8131-28bf-4ae9-842b-33b3d639b08e",
                            ReleaseYear = 1784,
                            Type = 0
                        },
                        new
                        {
                            Id = "bc61d2ce-3a6e-4651-b5b0-fe398f363d77",
                            AuthorId = "2c3ff652-d285-46c0-aeeb-6d31ae5baf02",
                            Name = "Hungarian Rhapsodies",
                            PreviewId = "0a8c3ca2-56ca-4534-a426-648854e61821",
                            ReleaseYear = 1885,
                            Type = 0
                        });
                });

            modelBuilder.Entity("Models.Entities.Author", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = "63f735bf-6c4e-4c06-b457-5ac0d6440729",
                            Name = "Wolfgang Amadeus Mozart",
                            UserId = "b71bba27-9914-4f63-b12f-22721a24831d"
                        },
                        new
                        {
                            Id = "0b740558-b53d-473a-b208-82a1f7d877b2",
                            Name = "Antonio Lucio Vivaldi",
                            UserId = "b71bba27-9914-4f63-b12f-22721a24831d"
                        },
                        new
                        {
                            Id = "173607a4-66b5-4577-8175-c675e3af1dff",
                            Name = "Ludwig van Beethoven",
                            UserId = "b71bba27-9914-4f63-b12f-22721a24831d"
                        },
                        new
                        {
                            Id = "afaf80e6-2e83-495d-90c1-12b2ed796a5b",
                            Name = "Dmitri Shostakovich",
                            UserId = "b71bba27-9914-4f63-b12f-22721a24831d"
                        },
                        new
                        {
                            Id = "40c7464c-0571-4fa7-a6f1-cf99ec6997b3",
                            Name = "Frédéric Chopin",
                            UserId = "b71bba27-9914-4f63-b12f-22721a24831d"
                        },
                        new
                        {
                            Id = "3c0d26e3-bcc0-48c0-a34b-fa94aa8479f6",
                            Name = "Nikolai Rimsky-Korsakov",
                            UserId = "b71bba27-9914-4f63-b12f-22721a24831d"
                        },
                        new
                        {
                            Id = "2c3ff652-d285-46c0-aeeb-6d31ae5baf02",
                            Name = "Franz Liszt",
                            UserId = "b71bba27-9914-4f63-b12f-22721a24831d"
                        },
                        new
                        {
                            Id = "4f444d53-f049-4755-a5f4-c3f724043e9c",
                            Name = "Paul de Senneville",
                            UserId = "b71bba27-9914-4f63-b12f-22721a24831d"
                        },
                        new
                        {
                            Id = "9fcde770-75d7-4856-bbfc-1d86a16303fd",
                            Name = "Niccolò Paganini",
                            UserId = "b71bba27-9914-4f63-b12f-22721a24831d"
                        },
                        new
                        {
                            Id = "3847a090-65dc-4a2c-afdf-f7a4d75853fc",
                            Name = "Rick Astley",
                            UserId = "b71bba27-9914-4f63-b12f-22721a24831d"
                        },
                        new
                        {
                            Id = "04d8e7ba-8177-4db8-81da-8fd4cc98dd40",
                            Name = "Pyotr Tchaikovsky",
                            UserId = "b71bba27-9914-4f63-b12f-22721a24831d"
                        });
                });

            modelBuilder.Entity("Models.Entities.Genre", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = "395a32aa-69c7-41cf-8260-7b960a5ca300",
                            Name = "Classic"
                        },
                        new
                        {
                            Id = "95041d7e-1b20-4fe2-a25d-2a1ffe3260d5",
                            Name = "Instrumental"
                        },
                        new
                        {
                            Id = "d757281b-2aa9-4a69-9646-794ab5e17bef",
                            Name = "Jazz"
                        },
                        new
                        {
                            Id = "76359ac0-30c1-48cc-ad18-e04228703239",
                            Name = "New Age"
                        },
                        new
                        {
                            Id = "0e3abf60-b7dc-49d7-a229-0f427b8476e3",
                            Name = "Pop"
                        });
                });

            modelBuilder.Entity("Models.Entities.Joints.GenreTrack", b =>
                {
                    b.Property<string>("GenreId")
                        .HasColumnType("text");

                    b.Property<string>("TrackId")
                        .HasColumnType("text");

                    b.HasKey("GenreId", "TrackId");

                    b.HasIndex("TrackId");

                    b.ToTable("GenreTrack");

                    b.HasData(
                        new
                        {
                            GenreId = "395a32aa-69c7-41cf-8260-7b960a5ca300",
                            TrackId = "8535211a-f47c-4cd7-bd91-cf2ed9922f76"
                        },
                        new
                        {
                            GenreId = "95041d7e-1b20-4fe2-a25d-2a1ffe3260d5",
                            TrackId = "8535211a-f47c-4cd7-bd91-cf2ed9922f76"
                        },
                        new
                        {
                            GenreId = "395a32aa-69c7-41cf-8260-7b960a5ca300",
                            TrackId = "5055e4b8-e689-4075-a738-e32de42569cd"
                        },
                        new
                        {
                            GenreId = "95041d7e-1b20-4fe2-a25d-2a1ffe3260d5",
                            TrackId = "5055e4b8-e689-4075-a738-e32de42569cd"
                        },
                        new
                        {
                            GenreId = "395a32aa-69c7-41cf-8260-7b960a5ca300",
                            TrackId = "6dcc122f-0627-4873-93f0-c0556bafa167"
                        },
                        new
                        {
                            GenreId = "95041d7e-1b20-4fe2-a25d-2a1ffe3260d5",
                            TrackId = "6dcc122f-0627-4873-93f0-c0556bafa167"
                        },
                        new
                        {
                            GenreId = "395a32aa-69c7-41cf-8260-7b960a5ca300",
                            TrackId = "db69e03d-6e74-4753-bcde-5b88c269b156"
                        },
                        new
                        {
                            GenreId = "d757281b-2aa9-4a69-9646-794ab5e17bef",
                            TrackId = "db69e03d-6e74-4753-bcde-5b88c269b156"
                        },
                        new
                        {
                            GenreId = "395a32aa-69c7-41cf-8260-7b960a5ca300",
                            TrackId = "d518fbd1-42b2-43c5-b4b4-9a0a72c885b4"
                        },
                        new
                        {
                            GenreId = "95041d7e-1b20-4fe2-a25d-2a1ffe3260d5",
                            TrackId = "d518fbd1-42b2-43c5-b4b4-9a0a72c885b4"
                        },
                        new
                        {
                            GenreId = "395a32aa-69c7-41cf-8260-7b960a5ca300",
                            TrackId = "d1825dd5-ee20-4722-ace9-1091f12deda3"
                        },
                        new
                        {
                            GenreId = "95041d7e-1b20-4fe2-a25d-2a1ffe3260d5",
                            TrackId = "d1825dd5-ee20-4722-ace9-1091f12deda3"
                        },
                        new
                        {
                            GenreId = "395a32aa-69c7-41cf-8260-7b960a5ca300",
                            TrackId = "a1786973-22d5-48f5-a27d-5a5d938398db"
                        },
                        new
                        {
                            GenreId = "95041d7e-1b20-4fe2-a25d-2a1ffe3260d5",
                            TrackId = "a1786973-22d5-48f5-a27d-5a5d938398db"
                        },
                        new
                        {
                            GenreId = "395a32aa-69c7-41cf-8260-7b960a5ca300",
                            TrackId = "1a9dd8f0-a103-4489-8023-2ab55470621a"
                        },
                        new
                        {
                            GenreId = "95041d7e-1b20-4fe2-a25d-2a1ffe3260d5",
                            TrackId = "1a9dd8f0-a103-4489-8023-2ab55470621a"
                        },
                        new
                        {
                            GenreId = "395a32aa-69c7-41cf-8260-7b960a5ca300",
                            TrackId = "d45d1835-0c68-439b-b4be-7401f6a443a7"
                        },
                        new
                        {
                            GenreId = "95041d7e-1b20-4fe2-a25d-2a1ffe3260d5",
                            TrackId = "d45d1835-0c68-439b-b4be-7401f6a443a7"
                        },
                        new
                        {
                            GenreId = "76359ac0-30c1-48cc-ad18-e04228703239",
                            TrackId = "91f28625-0258-4b79-8273-346579b3e436"
                        },
                        new
                        {
                            GenreId = "95041d7e-1b20-4fe2-a25d-2a1ffe3260d5",
                            TrackId = "91f28625-0258-4b79-8273-346579b3e436"
                        },
                        new
                        {
                            GenreId = "395a32aa-69c7-41cf-8260-7b960a5ca300",
                            TrackId = "a2d8cba6-8288-4da7-99c2-37b34158207a"
                        },
                        new
                        {
                            GenreId = "395a32aa-69c7-41cf-8260-7b960a5ca300",
                            TrackId = "e5d12b2b-f004-4e43-ab37-88839070834d"
                        },
                        new
                        {
                            GenreId = "95041d7e-1b20-4fe2-a25d-2a1ffe3260d5",
                            TrackId = "e5d12b2b-f004-4e43-ab37-88839070834d"
                        },
                        new
                        {
                            GenreId = "0e3abf60-b7dc-49d7-a229-0f427b8476e3",
                            TrackId = "c1b19385-aca5-491d-93a1-c26f45336c52"
                        },
                        new
                        {
                            GenreId = "395a32aa-69c7-41cf-8260-7b960a5ca300",
                            TrackId = "648fcf08-7295-441e-aae0-bbcbb8c8345a"
                        },
                        new
                        {
                            GenreId = "95041d7e-1b20-4fe2-a25d-2a1ffe3260d5",
                            TrackId = "648fcf08-7295-441e-aae0-bbcbb8c8345a"
                        },
                        new
                        {
                            GenreId = "395a32aa-69c7-41cf-8260-7b960a5ca300",
                            TrackId = "58cc3f32-8b43-43a2-82b6-e984ffe3c579"
                        },
                        new
                        {
                            GenreId = "95041d7e-1b20-4fe2-a25d-2a1ffe3260d5",
                            TrackId = "58cc3f32-8b43-43a2-82b6-e984ffe3c579"
                        },
                        new
                        {
                            GenreId = "395a32aa-69c7-41cf-8260-7b960a5ca300",
                            TrackId = "4fa2b08a-87d1-4ec8-a778-b65282e7a110"
                        },
                        new
                        {
                            GenreId = "95041d7e-1b20-4fe2-a25d-2a1ffe3260d5",
                            TrackId = "4fa2b08a-87d1-4ec8-a778-b65282e7a110"
                        });
                });

            modelBuilder.Entity("Models.Entities.Playlist", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OwnerId")
                        .HasColumnType("text");

                    b.Property<string>("PreviewId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("Models.Entities.Track", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AlbumId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            Id = "8535211a-f47c-4cd7-bd91-cf2ed9922f76",
                            AlbumId = "e0eaa331-b0d4-4e20-b926-314a82812681",
                            FileId = "7c561b1e-3070-4e83-b71a-2fd7a69fa040",
                            Name = "Summer - Storm"
                        },
                        new
                        {
                            Id = "5055e4b8-e689-4075-a738-e32de42569cd",
                            AlbumId = "e0eaa331-b0d4-4e20-b926-314a82812681",
                            FileId = "9f1d7cfd-53c6-478f-82e2-db737d1b9ecf",
                            Name = "Spring"
                        },
                        new
                        {
                            Id = "6dcc122f-0627-4873-93f0-c0556bafa167",
                            AlbumId = "d737f1d5-a9db-488a-95e8-aa05ed56e50a",
                            FileId = "e6a51aae-2ee3-4253-8b9c-1e88e65f0efb",
                            Name = "Moonlight Sonata"
                        },
                        new
                        {
                            Id = "db69e03d-6e74-4753-bcde-5b88c269b156",
                            AlbumId = "66e74437-33e5-4efe-b8e5-8457230a7e2a",
                            FileId = "29ad8ca9-c791-4482-8a44-15776862b282",
                            Name = "Waltz No. 2"
                        },
                        new
                        {
                            Id = "d518fbd1-42b2-43c5-b4b4-9a0a72c885b4",
                            AlbumId = "2ef6d9f7-25d6-459c-8b7e-ee23160dd880",
                            FileId = "4180556e-5365-4b9c-aa72-a47241346855",
                            Name = "Fantaisie Impromptu"
                        },
                        new
                        {
                            Id = "d1825dd5-ee20-4722-ace9-1091f12deda3",
                            AlbumId = "846ec490-0631-49d4-bf73-84bab5cef0ab",
                            FileId = "cdbc9b43-ee1b-4a64-8b2d-d579522ea84f",
                            Name = "Flight of the Bumblebee"
                        },
                        new
                        {
                            Id = "a1786973-22d5-48f5-a27d-5a5d938398db",
                            AlbumId = "d9f227dc-99cc-4aca-9640-7ebaf0181977",
                            FileId = "864239f6-65c5-440f-8326-213b3b25693f",
                            Name = "La Campanella"
                        },
                        new
                        {
                            Id = "d45d1835-0c68-439b-b4be-7401f6a443a7",
                            AlbumId = "059b9866-0612-4dba-bef5-07ae7929ed51",
                            FileId = "44f268c1-3e94-4d05-8ccb-17c2e77b538d",
                            Name = "Love Dream"
                        },
                        new
                        {
                            Id = "91f28625-0258-4b79-8273-346579b3e436",
                            AlbumId = "c3c887a1-de77-4765-ac12-d6fd418ac17a",
                            FileId = "5a9ba216-9883-471d-9c0f-4c3d37e4ec34",
                            Name = "Marriage d'Amour"
                        },
                        new
                        {
                            Id = "a2d8cba6-8288-4da7-99c2-37b34158207a",
                            AlbumId = "fbc761cb-80d1-4a55-9bb3-1335d049e38b",
                            FileId = "9d0a67df-6fb4-4fac-b670-49a5f590beb7",
                            Name = "Lacrimosa"
                        },
                        new
                        {
                            Id = "e5d12b2b-f004-4e43-ab37-88839070834d",
                            AlbumId = "d782ebd6-a658-44e6-9111-ecc301ad8f5d",
                            FileId = "15fa89e4-7777-4330-b32e-62172cd398c0",
                            Name = "Marriage of Figaro - Overture"
                        },
                        new
                        {
                            Id = "1a9dd8f0-a103-4489-8023-2ab55470621a",
                            AlbumId = "757de1e3-db47-4f47-a3c8-a9ad291e6238",
                            FileId = "493afb2c-eb2a-4eab-9e4e-6585eb9924ae",
                            Name = "La Campanella"
                        },
                        new
                        {
                            Id = "c1b19385-aca5-491d-93a1-c26f45336c52",
                            AlbumId = "682201dc-b229-4d9f-885c-d7bf2f8e5853",
                            FileId = "572cc6a2-a5ba-47f5-8819-8330770cf8b5",
                            Name = "Never gonna give you up"
                        },
                        new
                        {
                            Id = "648fcf08-7295-441e-aae0-bbcbb8c8345a",
                            AlbumId = "c67b6adc-ea5f-4523-bfc5-d221e4c61016",
                            FileId = "36febf49-1c49-4b69-8084-73ebce69040a",
                            Name = "Valse Sentimental"
                        },
                        new
                        {
                            Id = "58cc3f32-8b43-43a2-82b6-e984ffe3c579",
                            AlbumId = "284cb826-90c0-4ce2-b6ef-b656e192b602",
                            FileId = "b26e8131-28bf-4ae9-842b-33b3d639b08e",
                            Name = "Turkish March"
                        },
                        new
                        {
                            Id = "4fa2b08a-87d1-4ec8-a778-b65282e7a110",
                            AlbumId = "bc61d2ce-3a6e-4651-b5b0-fe398f363d77",
                            FileId = "2d47fb0d-971c-44e5-9d76-8b5589f0cbbb",
                            Name = "Hungarian Rhapsody No. 2"
                        });
                });

            modelBuilder.Entity("Models.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("ProfilePicId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("UserName", "Email")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b71bba27-9914-4f63-b12f-22721a24831d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ff6c0e13-3acf-4d30-99b7-69aa8275feac",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "John Doe",
                            PhoneNumberConfirmed = false,
                            ProfilePicId = "default_pfp",
                            Role = 0,
                            SecurityStamp = "025bc5e4-6844-49dd-bd8d-8c84f85ddb25",
                            TwoFactorEnabled = false,
                            UserName = "defaultUser"
                        });
                });

            modelBuilder.Entity("PlaylistTrack", b =>
                {
                    b.Property<string>("InPlaylistsId")
                        .HasColumnType("text");

                    b.Property<string>("TracksId")
                        .HasColumnType("text");

                    b.HasKey("InPlaylistsId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("PlaylistTrack");
                });

            modelBuilder.Entity("TrackUser", b =>
                {
                    b.Property<string>("HistoryId")
                        .HasColumnType("text");

                    b.Property<string>("HistoryId1")
                        .HasColumnType("text");

                    b.HasKey("HistoryId", "HistoryId1");

                    b.HasIndex("HistoryId1");

                    b.ToTable("TrackUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Entities.Album", b =>
                {
                    b.HasOne("Models.Entities.Author", "Author")
                        .WithMany("Albums")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Models.Entities.Author", b =>
                {
                    b.HasOne("Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Entities.Joints.GenreTrack", b =>
                {
                    b.HasOne("Models.Entities.Genre", "Genre")
                        .WithMany("GenreTracks")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.Track", "Track")
                        .WithMany("GenreTracks")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("Models.Entities.Playlist", b =>
                {
                    b.HasOne("Models.Entities.User", "Owner")
                        .WithMany("Playlists")
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Models.Entities.Track", b =>
                {
                    b.HasOne("Models.Entities.Album", "Album")
                        .WithMany("Tracks")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");
                });

            modelBuilder.Entity("PlaylistTrack", b =>
                {
                    b.HasOne("Models.Entities.Playlist", null)
                        .WithMany()
                        .HasForeignKey("InPlaylistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TrackUser", b =>
                {
                    b.HasOne("Models.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("HistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("HistoryId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Entities.Album", b =>
                {
                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("Models.Entities.Author", b =>
                {
                    b.Navigation("Albums");
                });

            modelBuilder.Entity("Models.Entities.Genre", b =>
                {
                    b.Navigation("GenreTracks");
                });

            modelBuilder.Entity("Models.Entities.Track", b =>
                {
                    b.Navigation("GenreTracks");
                });

            modelBuilder.Entity("Models.Entities.User", b =>
                {
                    b.Navigation("Playlists");
                });
#pragma warning restore 612, 618
        }
    }
}
