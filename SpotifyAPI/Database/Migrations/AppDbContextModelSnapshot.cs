// <auto-generated />
using System;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Database.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GenreTrack", b =>
                {
                    b.Property<string>("GenresId")
                        .HasColumnType("text");

                    b.Property<string>("TracksId")
                        .HasColumnType("text");

                    b.HasKey("GenresId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("GenreTrack");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Models.Entities.Album", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PreviewId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Albums");

                    b.HasData(
                        new
                        {
                            Id = "b995419f-77ee-464c-9337-1256f1b1308f",
                            AuthorId = "19f36b25-181d-4b1f-9669-efee805b14af",
                            Name = "The Four Seasons",
                            PreviewId = "7c561b1e-3070-4e83-b71a-2fd7a69fa040",
                            ReleaseYear = 1725,
                            Type = 0
                        },
                        new
                        {
                            Id = "aa7cdf89-f17e-498c-bd57-aca88eb2dc15",
                            AuthorId = "e1c6cdaf-804e-4d68-942c-b9bd2ebc7ebc",
                            Name = "Moonlight Sonata",
                            PreviewId = "e6a51aae-2ee3-4253-8b9c-1e88e65f0efb",
                            ReleaseYear = 1802,
                            Type = 1
                        },
                        new
                        {
                            Id = "e13b330a-8550-4856-9f2c-750a716f001a",
                            AuthorId = "f628a58c-8c61-43f9-ad82-c67111aabb3d",
                            Name = "Waltz No. 2",
                            PreviewId = "29ad8ca9-c791-4482-8a44-15776862b282",
                            ReleaseYear = 1938,
                            Type = 1
                        },
                        new
                        {
                            Id = "c4bf9a82-7d3a-427c-ad1a-f3467810eb0d",
                            AuthorId = "0cefd1bc-75e0-4c31-b2af-d024f3038116",
                            Name = "Fantaisie-Impromptu",
                            PreviewId = "4180556e-5365-4b9c-aa72-a47241346855",
                            ReleaseYear = 1834,
                            Type = 1
                        },
                        new
                        {
                            Id = "239a237a-e8a9-49af-b54b-3d5a67b96a0f",
                            AuthorId = "91440e02-1405-46d3-85d4-2bfbe7c815f2",
                            Name = "The Tale of Tsar Saltan",
                            PreviewId = "cdbc9b43-ee1b-4a64-8b2d-d579522ea84f",
                            ReleaseYear = 1900,
                            Type = 0
                        },
                        new
                        {
                            Id = "59486912-6136-4854-815f-b41d32118b68",
                            AuthorId = "811baf1d-17a0-4ebf-b56f-86cd840740bc",
                            Name = "Grandes études de Paganini",
                            PreviewId = "864239f6-65c5-440f-8326-213b3b25693f",
                            ReleaseYear = 1851,
                            Type = 0
                        },
                        new
                        {
                            Id = "16d30176-62cf-4adc-8326-d21ceb357f83",
                            AuthorId = "811baf1d-17a0-4ebf-b56f-86cd840740bc",
                            Name = "Liebestraum",
                            PreviewId = "44f268c1-3e94-4d05-8ccb-17c2e77b538d",
                            ReleaseYear = 1850,
                            Type = 0
                        },
                        new
                        {
                            Id = "70367f69-9f2b-43ed-b474-caa66b315496",
                            AuthorId = "c2b13e92-03f2-4b6c-9f23-e5ff3ff160a8",
                            Name = "Lettre à ma mère",
                            PreviewId = "5a9ba216-9883-471d-9c0f-4c3d37e4ec34",
                            ReleaseYear = 1979,
                            Type = 0
                        },
                        new
                        {
                            Id = "5b565a0a-200a-4512-a9bd-641a139b57be",
                            AuthorId = "092cfbee-eaea-4535-b532-32e277a663ac",
                            Name = "Requiem",
                            PreviewId = "9d0a67df-6fb4-4fac-b670-49a5f590beb7",
                            ReleaseYear = 1791,
                            Type = 0
                        },
                        new
                        {
                            Id = "4aa4a09b-5c6e-4671-9d8e-3a37aae64e86",
                            AuthorId = "092cfbee-eaea-4535-b532-32e277a663ac",
                            Name = "The marriage of Figaro",
                            PreviewId = "15fa89e4-7777-4330-b32e-62172cd398c0",
                            ReleaseYear = 1786,
                            Type = 0
                        },
                        new
                        {
                            Id = "46ba9a91-d55e-41cd-a0fa-28b03875e228",
                            AuthorId = "cf87b627-49f7-4950-92cc-35bc0e6f2f30",
                            Name = "Violin Concerto No. 2",
                            PreviewId = "493afb2c-eb2a-4eab-9e4e-6585eb9924ae",
                            ReleaseYear = 1826,
                            Type = 0
                        },
                        new
                        {
                            Id = "baddddc9-2836-42b0-bda7-5af383d69b7d",
                            AuthorId = "b8f103a1-f080-496b-b94d-4ff8e0fa5387",
                            Name = "Whenever you need somebody",
                            PreviewId = "572cc6a2-a5ba-47f5-8819-8330770cf8b5",
                            ReleaseYear = 1987,
                            Type = 0
                        },
                        new
                        {
                            Id = "59024c6d-f7c6-4a50-8759-d9828b24bcff",
                            AuthorId = "826a0449-2e0f-4efd-8100-5e8f7507289d",
                            Name = "Valse-Scherzo",
                            PreviewId = "36febf49-1c49-4b69-8084-73ebce69040a",
                            ReleaseYear = 1877,
                            Type = 0
                        },
                        new
                        {
                            Id = "19cdb547-aa3c-4cc1-aa74-c0b78080f9a4",
                            AuthorId = "092cfbee-eaea-4535-b532-32e277a663ac",
                            Name = "Piano Sonata No. 11",
                            PreviewId = "b26e8131-28bf-4ae9-842b-33b3d639b08e",
                            ReleaseYear = 1784,
                            Type = 0
                        },
                        new
                        {
                            Id = "da972e20-bead-4684-8a2e-2dc856ef3b63",
                            AuthorId = "811baf1d-17a0-4ebf-b56f-86cd840740bc",
                            Name = "Hungarian Rhapsodies",
                            PreviewId = "0a8c3ca2-56ca-4534-a426-648854e61821",
                            ReleaseYear = 1885,
                            Type = 0
                        });
                });

            modelBuilder.Entity("Models.Entities.Author", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = "092cfbee-eaea-4535-b532-32e277a663ac",
                            Name = "Wolfgang Amadeus Mozart",
                            UserId = "11b59229-3476-4583-8ea2-f2e87add103d"
                        },
                        new
                        {
                            Id = "19f36b25-181d-4b1f-9669-efee805b14af",
                            Name = "Antonio Lucio Vivaldi",
                            UserId = "73267a2e-0679-44fa-99ea-05a728fd48de"
                        },
                        new
                        {
                            Id = "e1c6cdaf-804e-4d68-942c-b9bd2ebc7ebc",
                            Name = "Ludwig van Beethoven",
                            UserId = "80bf3d52-1d8f-49e0-a0ea-ca9b32fb66e4"
                        },
                        new
                        {
                            Id = "f628a58c-8c61-43f9-ad82-c67111aabb3d",
                            Name = "Dmitri Shostakovich",
                            UserId = "84eda8c2-e662-4818-8f78-906da314e229"
                        },
                        new
                        {
                            Id = "0cefd1bc-75e0-4c31-b2af-d024f3038116",
                            Name = "Frédéric Chopin",
                            UserId = "dc56ddae-71fd-4857-a7f3-36c81cac2d7b"
                        },
                        new
                        {
                            Id = "91440e02-1405-46d3-85d4-2bfbe7c815f2",
                            Name = "Nikolai Rimsky-Korsakov",
                            UserId = "b1444438-d3a0-46ac-a9f0-3b011c059f8b"
                        },
                        new
                        {
                            Id = "811baf1d-17a0-4ebf-b56f-86cd840740bc",
                            Name = "Franz Liszt",
                            UserId = "784a06fb-f7e9-4f6a-9509-858b329d5f89"
                        },
                        new
                        {
                            Id = "c2b13e92-03f2-4b6c-9f23-e5ff3ff160a8",
                            Name = "Paul de Senneville",
                            UserId = "7a56cedd-8ee6-40e0-b821-965fc1597805"
                        },
                        new
                        {
                            Id = "cf87b627-49f7-4950-92cc-35bc0e6f2f30",
                            Name = "Niccolò Paganini",
                            UserId = "ba77df09-85c5-4a6d-bf2d-00a984b6a5e6"
                        },
                        new
                        {
                            Id = "b8f103a1-f080-496b-b94d-4ff8e0fa5387",
                            Name = "Rick Astley",
                            UserId = "ea1bc22e-c88d-4b19-93f8-596f014f3eea"
                        },
                        new
                        {
                            Id = "826a0449-2e0f-4efd-8100-5e8f7507289d",
                            Name = "Pyotr Tchaikovsky",
                            UserId = "748163e5-fc61-4b48-a0f2-da4e2bd9045d"
                        });
                });

            modelBuilder.Entity("Models.Entities.Genre", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = "9f78eadf-f234-4852-a196-6c26c75110fc",
                            Name = "Classic"
                        },
                        new
                        {
                            Id = "b75549f2-9226-455b-9a6c-3832a582b944",
                            Name = "Instrumental"
                        },
                        new
                        {
                            Id = "95392dc3-7240-46cb-b565-f44efe81069d",
                            Name = "Jazz"
                        },
                        new
                        {
                            Id = "046b8651-b7d2-4201-a867-4c8599da8180",
                            Name = "New Age"
                        },
                        new
                        {
                            Id = "46c47b5c-fbca-4b84-8797-d19c376dfdd9",
                            Name = "Pop"
                        });
                });

            modelBuilder.Entity("Models.Entities.Playlist", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OwnerId")
                        .HasColumnType("text");

                    b.Property<string>("PreviewId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("Models.Entities.Track", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AlbumId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            Id = "6689e3a6-0564-4505-ba0d-a490162d7286",
                            AlbumId = "b995419f-77ee-464c-9337-1256f1b1308f",
                            FileId = "7c561b1e-3070-4e83-b71a-2fd7a69fa040",
                            Name = "Summer - Storm"
                        },
                        new
                        {
                            Id = "f7781ad9-532e-4724-ae80-60f340b81a28",
                            AlbumId = "b995419f-77ee-464c-9337-1256f1b1308f",
                            FileId = "9f1d7cfd-53c6-478f-82e2-db737d1b9ecf",
                            Name = "Spring"
                        },
                        new
                        {
                            Id = "6dbe1fcf-8707-4a4f-b807-a5e9467e668f",
                            AlbumId = "aa7cdf89-f17e-498c-bd57-aca88eb2dc15",
                            FileId = "e6a51aae-2ee3-4253-8b9c-1e88e65f0efb",
                            Name = "Moonlight Sonata"
                        },
                        new
                        {
                            Id = "33e8f315-5c48-45ee-a7b3-9081702d35e2",
                            AlbumId = "e13b330a-8550-4856-9f2c-750a716f001a",
                            FileId = "29ad8ca9-c791-4482-8a44-15776862b282",
                            Name = "Waltz No. 2"
                        },
                        new
                        {
                            Id = "cf896c1f-577f-4408-ada3-cb8988b5dc17",
                            AlbumId = "c4bf9a82-7d3a-427c-ad1a-f3467810eb0d",
                            FileId = "4180556e-5365-4b9c-aa72-a47241346855",
                            Name = "Fantaisie Impromptu"
                        },
                        new
                        {
                            Id = "7140b053-2540-448f-994c-7642fee5074a",
                            AlbumId = "239a237a-e8a9-49af-b54b-3d5a67b96a0f",
                            FileId = "4180556e-5365-4b9c-aa72-a47241346855",
                            Name = "Flight of the Bumblebee"
                        },
                        new
                        {
                            Id = "a974a77a-2fff-4efa-acbc-faa27c329a59",
                            AlbumId = "59486912-6136-4854-815f-b41d32118b68",
                            FileId = "864239f6-65c5-440f-8326-213b3b25693f",
                            Name = "La Campanella"
                        },
                        new
                        {
                            Id = "3be1a0c7-ce95-4d87-b2e2-655372a07b19",
                            AlbumId = "16d30176-62cf-4adc-8326-d21ceb357f83",
                            FileId = "44f268c1-3e94-4d05-8ccb-17c2e77b538d",
                            Name = "Love Dream"
                        },
                        new
                        {
                            Id = "b38a088f-96a9-4cf2-b23c-fc2d8987b787",
                            AlbumId = "70367f69-9f2b-43ed-b474-caa66b315496",
                            FileId = "15fa89e4-7777-4330-b32e-62172cd398c0",
                            Name = "Marriage d'Amour"
                        },
                        new
                        {
                            Id = "88e47cf7-8a3e-4ea1-be87-4aa491dcca5d",
                            AlbumId = "5b565a0a-200a-4512-a9bd-641a139b57be",
                            FileId = "9d0a67df-6fb4-4fac-b670-49a5f590beb7",
                            Name = "Lacrimosa"
                        },
                        new
                        {
                            Id = "af8788c1-b041-497f-9c3c-388d56a96f3c",
                            AlbumId = "4aa4a09b-5c6e-4671-9d8e-3a37aae64e86",
                            FileId = "15fa89e4-7777-4330-b32e-62172cd398c0",
                            Name = "Marriage of Figaro - Overture"
                        },
                        new
                        {
                            Id = "9b2c6266-b7cf-4753-9d34-8d6e19ae7b4d",
                            AlbumId = "46ba9a91-d55e-41cd-a0fa-28b03875e228",
                            FileId = "493afb2c-eb2a-4eab-9e4e-6585eb9924ae",
                            Name = "La Campanella"
                        },
                        new
                        {
                            Id = "f60ac6a5-d96a-487c-b989-1cf581740be6",
                            AlbumId = "baddddc9-2836-42b0-bda7-5af383d69b7d",
                            FileId = "572cc6a2-a5ba-47f5-8819-8330770cf8b5",
                            Name = "Never gonna give you up"
                        },
                        new
                        {
                            Id = "bed643d4-8323-4ecd-bec9-d20a1fdf20e1",
                            AlbumId = "59024c6d-f7c6-4a50-8759-d9828b24bcff",
                            FileId = "36febf49-1c49-4b69-8084-73ebce69040a",
                            Name = "Valse Sentimental"
                        },
                        new
                        {
                            Id = "f22d90df-b5b4-49f9-986d-da3b168ce00e",
                            AlbumId = "19cdb547-aa3c-4cc1-aa74-c0b78080f9a4",
                            FileId = "b26e8131-28bf-4ae9-842b-33b3d639b08e",
                            Name = "Turkish March"
                        },
                        new
                        {
                            Id = "fcf0eb6e-3432-4827-bb55-ce62d5815083",
                            AlbumId = "da972e20-bead-4684-8a2e-2dc856ef3b63",
                            FileId = "2d47fb0d-971c-44e5-9d76-8b5589f0cbbb",
                            Name = "Hungarian Rhapsody No. 2"
                        });
                });

            modelBuilder.Entity("Models.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("UserName", "Email")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "11b59229-3476-4583-8ea2-f2e87add103d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fa392474-1498-46bc-b66d-4ad7ca6b5576",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Wolfgang Amadeus Mozart",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "79bae437-cb62-4358-8a80-77faf7ecba76",
                            TwoFactorEnabled = false,
                            UserName = "mozart"
                        },
                        new
                        {
                            Id = "73267a2e-0679-44fa-99ea-05a728fd48de",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "163a3073-4aa4-420d-8e2e-d7e77b87d96f",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Antonio Lucio Vivaldi",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "9188a1f2-d77f-4052-aeb3-e726e3a5e51f",
                            TwoFactorEnabled = false,
                            UserName = "vivaldi"
                        },
                        new
                        {
                            Id = "80bf3d52-1d8f-49e0-a0ea-ca9b32fb66e4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f332eb42-e557-4594-a48e-d75ed5daf3d7",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Ludwig van Beethoven",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "265c77da-6e50-4847-8e14-39194f70d9f4",
                            TwoFactorEnabled = false,
                            UserName = "beethoven"
                        },
                        new
                        {
                            Id = "84eda8c2-e662-4818-8f78-906da314e229",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "93a9f503-76c7-411f-8828-fb321270548b",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Dmitri Shostakovich",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "5a3b048a-95aa-4788-899f-3d7e28b3c876",
                            TwoFactorEnabled = false,
                            UserName = "shostakovich"
                        },
                        new
                        {
                            Id = "dc56ddae-71fd-4857-a7f3-36c81cac2d7b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "58745179-6ee1-4739-9d2c-ddf7016b78d9",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Frédéric Chopin",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "edb739d3-8bec-442b-86c2-da9e170fbb2e",
                            TwoFactorEnabled = false,
                            UserName = "chopin"
                        },
                        new
                        {
                            Id = "b1444438-d3a0-46ac-a9f0-3b011c059f8b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0c5b9dcd-1586-4242-91cc-501857d0a17a",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Nikolai Rimsky-Korsakov",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "142f47a4-ad84-40d6-830c-dea0dad22e89",
                            TwoFactorEnabled = false,
                            UserName = "rimsky-korsakov"
                        },
                        new
                        {
                            Id = "784a06fb-f7e9-4f6a-9509-858b329d5f89",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cea63bba-31ed-469a-8573-9094012cc495",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Franz Liszt",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "0382a7d5-cc3f-4b5c-a172-b8b8c89e4b03",
                            TwoFactorEnabled = false,
                            UserName = "liszt"
                        },
                        new
                        {
                            Id = "7a56cedd-8ee6-40e0-b821-965fc1597805",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d8da9002-4efa-4204-a967-55a748d628de",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Paul de Senneville",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "19944d90-5ea4-4bc3-a109-81e2e01748e5",
                            TwoFactorEnabled = false,
                            UserName = "senneville"
                        },
                        new
                        {
                            Id = "ba77df09-85c5-4a6d-bf2d-00a984b6a5e6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9d8d4969-3e29-4bea-8077-4899c2cb33ee",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Niccolò Paganini",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "4def6d4c-70d1-4734-9cd1-348fe5ec81ab",
                            TwoFactorEnabled = false,
                            UserName = "paganini"
                        },
                        new
                        {
                            Id = "ea1bc22e-c88d-4b19-93f8-596f014f3eea",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9d7bc84b-edf2-4444-8536-12cf410dc56d",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Rick Astley",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "6692d726-5dc2-4ad6-83b5-04f7a918336f",
                            TwoFactorEnabled = false,
                            UserName = "astley"
                        },
                        new
                        {
                            Id = "748163e5-fc61-4b48-a0f2-da4e2bd9045d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a0cfb751-e15b-4d0c-b5bc-b8fe4d5bb553",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Pyotr Tchaikovsky",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "fcad1a71-7f4c-4b4c-956a-bee7ffba5961",
                            TwoFactorEnabled = false,
                            UserName = "tchaikovsky"
                        });
                });

            modelBuilder.Entity("PlaylistTrack", b =>
                {
                    b.Property<string>("InPlaylistsId")
                        .HasColumnType("text");

                    b.Property<string>("TracksId")
                        .HasColumnType("text");

                    b.HasKey("InPlaylistsId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("PlaylistTrack");
                });

            modelBuilder.Entity("TrackUser", b =>
                {
                    b.Property<string>("HistoryId")
                        .HasColumnType("text");

                    b.Property<string>("HistoryId1")
                        .HasColumnType("text");

                    b.HasKey("HistoryId", "HistoryId1");

                    b.HasIndex("HistoryId1");

                    b.ToTable("TrackUser");
                });

            modelBuilder.Entity("GenreTrack", b =>
                {
                    b.HasOne("Models.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Entities.Album", b =>
                {
                    b.HasOne("Models.Entities.Author", "Author")
                        .WithMany("Albums")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Models.Entities.Author", b =>
                {
                    b.HasOne("Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Entities.Playlist", b =>
                {
                    b.HasOne("Models.Entities.User", "Owner")
                        .WithMany("Playlists")
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Models.Entities.Track", b =>
                {
                    b.HasOne("Models.Entities.Album", "Album")
                        .WithMany("Tracks")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");
                });

            modelBuilder.Entity("PlaylistTrack", b =>
                {
                    b.HasOne("Models.Entities.Playlist", null)
                        .WithMany()
                        .HasForeignKey("InPlaylistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TrackUser", b =>
                {
                    b.HasOne("Models.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("HistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("HistoryId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Entities.Album", b =>
                {
                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("Models.Entities.Author", b =>
                {
                    b.Navigation("Albums");
                });

            modelBuilder.Entity("Models.Entities.User", b =>
                {
                    b.Navigation("Playlists");
                });
#pragma warning restore 612, 618
        }
    }
}
